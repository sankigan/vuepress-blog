import{_ as p,c as t,a as s,e as o,d as a,b as c,r as l,o as i}from"./app-CRUSJUWc.js";const r={},u={href:"https://juejin.im/post/5aaa37c8f265da23945f365c",target:"_blank",rel:"noopener noreferrer"};function d(m,n){const e=l("ExternalLinkIcon");return i(),t("div",null,[n[2]||(n[2]=s("h1",{id:"前端模块化",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前端模块化"},[s("span",null,"前端模块化")])],-1)),s("blockquote",null,[s("p",null,[n[1]||(n[1]=a("参考")),s("a",u,[n[0]||(n[0]=a("这篇文章")),c(e)])])]),n[3]||(n[3]=o(`<h2 id="commonjs" tabindex="-1"><a class="header-anchor" href="#commonjs"><span><strong>CommonJS</strong></span></a></h2><p>Node.js是CommonJS规范的主要实践者，它有四个重要的环境变量为模块化的实现提供支持：<code>module</code>、<code>exports</code>、<code>require</code>、<code>global</code>。实际使用时，用<code>module.exports</code>定义当前模块对外输出的接口（不推荐直接用<code>exports</code>），用<code>require</code>加载模块。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 定义模块math.js</span></span>
<span class="line"><span class="token keyword">var</span> basicNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// 在这里写上需要向外暴露的函数、变量</span></span>
<span class="line">    <span class="token literal-property property">add</span><span class="token operator">:</span> add<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">basicNum</span><span class="token operator">:</span> basicNum</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 引用自定义的模块时，参数包含路径，可省略.js</span></span>
<span class="line"><span class="token keyword">var</span> math <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./math&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 引用核心模块时，不需要带路径</span></span>
<span class="line"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">http<span class="token punctuation">.</span><span class="token function">createService</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>CommonJS用同步的方式加载模块</strong>。在服务器端，模块文件都存在本地磁盘，读取非常快，所以这样做不会有问题。但是在浏览器端，限于网络原因，更合理的方案是使用异步加载。</p><h2 id="amd和require-js" tabindex="-1"><a class="header-anchor" href="#amd和require-js"><span><strong>AMD和require.js</strong></span></a></h2><p>AMD规范采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p><h2 id="cmd和sea-js" tabindex="-1"><a class="header-anchor" href="#cmd和sea-js"><span><strong>CMD和sea.js</strong></span></a></h2><p>require.js在申明依赖的模块时会在第一时间加载并执行模块内的代码。</p><p>CMD是另一种js模块化方案，它与AMD很类似，不同点在于：<strong>AMD推崇依赖前置、提前执行，CMD推崇依赖就近、延迟执行</strong>。</p><h2 id="es6-module" tabindex="-1"><a class="header-anchor" href="#es6-module"><span><strong>ES6 Module</strong></span></a></h2><p>ES6在语言标准的层面上，实现了模块功能，而且实现的相当简单，旨在成为浏览器和服务器通用的模块解决方案。其模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。<code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 定义Math.js</span></span>
<span class="line"><span class="token keyword">var</span> basicNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token punctuation">{</span> basicNum<span class="token punctuation">,</span> add <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 引用模块</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> basicNum<span class="token punctuation">,</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./math&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">ele</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    ele<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">99</span> <span class="token operator">+</span> basicNum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上例所示，使用<code>import</code>命令的时候，用户需要知道所加载的变量名或函数名。其实ES6还提供了<code>export default</code>命令，为模块指定默认输出，对应的<code>import</code>语句不需要使用大括号。</p><p>ES6模块不是对象，<code>import</code>命令会被JS引擎静态分析，在编译时就引入模块代码，而不是在代码运行时加载，所以无法实现条件加载。也正因为这个，使得静态分析成为可能。</p><h2 id="es6模块与commonjs模块的差异" tabindex="-1"><a class="header-anchor" href="#es6模块与commonjs模块的差异"><span>ES6模块与CommonJS模块的差异</span></a></h2><ol><li><p><strong>CommonJS模块输出的是一个值的拷贝，ES6模块输出的是值的引用。</strong></p></li><li><p><strong>CommonJS模块是运行时加载，ES6模块是编译时输出接口。</strong></p><ul><li><p>运行时加载：CommonJS模块就是对象；即在输入时事先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载成为<code>运行时加载</code>。</p></li><li><p>编译时加载：ES6模块不是对象，而是通过<code>export</code>命令显式指定输出的代码，<code>import</code>时采用静态命令的形式。即在<code>import</code>时可以指定加载某个输出值，而不是加载整个模块，这种加载称为<code>编译时加载</code>。</p></li></ul></li></ol>`,16))])}const v=p(r,[["render",d],["__file","module.html.vue"]]),b=JSON.parse('{"path":"/blogs/javascript/module.html","title":"前端模块化","lang":"zh-CN","frontmatter":{"title":"前端模块化","date":"2019-4-16","editLink":false,"tags":["JavaScript"],"categories":["前端"]},"headers":[{"level":2,"title":"CommonJS","slug":"commonjs","link":"#commonjs","children":[]},{"level":2,"title":"AMD和require.js","slug":"amd和require-js","link":"#amd和require-js","children":[]},{"level":2,"title":"CMD和sea.js","slug":"cmd和sea-js","link":"#cmd和sea-js","children":[]},{"level":2,"title":"ES6 Module","slug":"es6-module","link":"#es6-module","children":[]},{"level":2,"title":"ES6模块与CommonJS模块的差异","slug":"es6模块与commonjs模块的差异","link":"#es6模块与commonjs模块的差异","children":[]}],"git":{"createdTime":1739535625000,"updatedTime":1739535625000,"contributors":[{"name":"sankigan","email":"sankigan@tencent.com","commits":1}]},"filePathRelative":"blogs/javascript/module.md"}');export{v as comp,b as data};
