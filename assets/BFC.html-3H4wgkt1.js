import{_ as e,c as p,e as t,a,d as s,b as c,r as l,o as i}from"./app-CRUSJUWc.js";const r={},d={href:"http://www.cnblogs.com/xiaohuochai/p/5248536.html",target:"_blank",rel:"noopener noreferrer"};function g(u,n){const o=l("ExternalLinkIcon");return i(),p("div",null,[n[3]||(n[3]=t('<h2 id="什么是bfc-block-formatting-context" tabindex="-1"><a class="header-anchor" href="#什么是bfc-block-formatting-context"><span>什么是BFC（Block Formatting Context）？</span></a></h2><blockquote><p>BFC 直译为“块级格式化上下文”。它是一个独立的渲染区域，只有Block-level Box参与，它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p></blockquote><p>文档流分 <code>定位流</code>、<code>浮动流</code> 和 <code>普通流</code> 三种。而普通流其实就是指 BFC 中的 FC。</p><p>FC直译过来是格式化上下文，它是<strong>页面中的一块渲染区域</strong>，有一套渲染规则，决定了其<strong>子元素如何布局，以及和其他元素之间的关系和作用</strong>。</p><p>BFC 对布局的影响主要体现在对 <strong><code>float</code></strong> 和 <strong><code>margin</code></strong> 两个属性的处理。BFC 让 float 和 margin 这两个属性的表现更加符合我们的直觉。</p><p>根据 BFC 对其内部元素和外部元素的表现特性，将 BFC 的特性总结为 <strong><code>对内部元素的包裹性</code></strong> 及 <strong><code>对外部元素的独立性</code></strong>。</p><h2 id="如何触发-bfc" tabindex="-1"><a class="header-anchor" href="#如何触发-bfc"><span>如何触发 BFC ？</span></a></h2><p>满足下列条件之一就可触发 BFC。</p><ul><li>根元素，即 HTML 元素</li><li><code>float</code> 的值不为 <code>none</code></li><li><code>overflow</code> 的值不为 <code>visible</code></li><li><code>display</code> 的值为 <code>inline-block</code>、<code>table-cell</code>、<code>table-caption</code></li><li><code>position</code> 的值为 <code>absolute</code> 或 <code>fixed</code></li></ul><h2 id="bfc-布局规则" tabindex="-1"><a class="header-anchor" href="#bfc-布局规则"><span>BFC 布局规则</span></a></h2><p>先来个总结，稍后会一一说明。</p><ol><li>内部的 Box 会在垂直方向，一个接一个地放置。</li><li>Box 垂直方向的距离由 margin 决定。<strong>属于同一个 BFC 的两个相邻 Box</strong> 的 margin 会发生重叠。</li><li>每个元素的 margin box 的左边，与包含块 border box 的左边相接触（对于从左向右的格式化，否则相反）。即使存在浮动也是如此。</li><li>BFC 的区域不会与 float box 重叠。</li><li>BFC 就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算 BFC 的高度时，浮动元素参与计算。</li></ol><h2 id="bfc-有哪些作用" tabindex="-1"><a class="header-anchor" href="#bfc-有哪些作用"><span>BFC 有哪些作用？</span></a></h2>',13)),a("blockquote",null,[a("p",null,[n[1]||(n[1]=s("!!! 这里推荐去")),a("a",d,[n[0]||(n[0]=s("这里")),c(o)]),n[2]||(n[2]=s("在线查看 BFC 的作用。"))])]),n[4]||(n[4]=t(`<ol><li>自适应两栏布局</li><li>可以阻止元素被浮动元素覆盖</li><li>可以包含浮动元素——清除内部浮动</li><li>分属于不同的 BFC 时可以阻止 margin 重叠</li></ol><hr><h3 id="bfc-布局规则1-内部的-box-会在垂直方向-一个接一个地放置" tabindex="-1"><a class="header-anchor" href="#bfc-布局规则1-内部的-box-会在垂直方向-一个接一个地放置"><span>BFC 布局规则1：内部的 Box 会在垂直方向， 一个接一个地放置</span></a></h3><p>上文定义中提到过的块级盒：<code>Block-level Box</code> 到底是什么意思呢？</p><p><img src="https://lc-gold-cdn.xitu.io/b80801d8707be24ecbc0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>我们平常说的盒子是由 margin、border、padding、content组成的，实际上每种类型的四条边定义了一个盒子，分别是<code>content box</code>、<code>padding box</code>、<code>border box</code>、<code>margin box</code>，这四种类型的盒子一直存在，即使他们的值为0。决定块盒在包含块中与相邻块盒的垂直间距的便是 <code>margin-box</code>。</p><p><strong>提示</strong>：Box 之间的距离虽然也可以使用 padding 来控制，但是此时实际上还是属于 box 内部里面，而且使用 padding 来控制的话就不能再使用 border 属性了。</p><p>布局规则1就是我们<strong>平常div一行一行块级放置的样式</strong>。</p><h3 id="bfc-布局规则2-box-垂直方向的距离由-margin-决定。属于同一个-bfc-的两个相邻-box-的-margin-会发生重叠" tabindex="-1"><a class="header-anchor" href="#bfc-布局规则2-box-垂直方向的距离由-margin-决定。属于同一个-bfc-的两个相邻-box-的-margin-会发生重叠"><span>BFC 布局规则2：Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</span></a></h3><p><img src="https://lc-gold-cdn.xitu.io/6b0fc0e3d34f94875d35.gif?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>上文提到过，决定块级盒在包含块中与相邻块盒的垂直间距的便是 <code>margin-box</code>。上面的例子就是这种情况。</p><p>演示中 css 属性设置：上面的 box：<code>margin-bottom: 100px; </code>下面的 box：<code>margin-top: 100px;</code>（他们是同一侧的 margin，所以会发生 margin 重叠的情况，两个 div 的距离实际上只有 100px。）</p><p>这个时候 <strong><code>BFC 的作用 4：阻止 margin 重叠</code></strong> 就派上了用场：</p><p>当两个相邻块级子元素<strong>分属于不同的 BFC <strong>时可以</strong>阻止 margin 重叠</strong>。</p><p><strong>操作方法</strong>：给其中一个 div 外面包一个 div，然后通过触发外面这个 div 的 BFC，就可以阻止这两个 div 的 margin 重叠，具体触发方式可以参考上文给出的触发条件。</p><h3 id="bfc-布局规则3-每个元素的-margin-box-的左边-与包含块-border-box-的左边相接触-对于从左向右的格式化-否则相反-。即使存在浮动也是如此。" tabindex="-1"><a class="header-anchor" href="#bfc-布局规则3-每个元素的-margin-box-的左边-与包含块-border-box-的左边相接触-对于从左向右的格式化-否则相反-。即使存在浮动也是如此。"><span>BFC 布局规则3：每个元素的 margin box 的左边，与包含块 border-box 的左边相接触（对于从左向右的格式化，否则相反）。即使存在浮动也是如此。</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>par<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    // 给这两个子div加浮动，浮动的结果，如果没有清除浮动的话，父div不会将下面两个div包裹，</span>
<span class="line">    // 但还是在父div的范围之内。</span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析</strong>：给这两个子 div 加浮动，浮动的结果，如果没有清除浮动的话，父 div 不会将下面两个 div 包裹，但还是在父 div 的范围之内，<strong>左浮动是子 div 的左边接触父 div 的 <code>border-box</code> 的左边，右浮动是子 div 的左边接触父 div 的 <code>border-box</code> 的右边</strong>，除非设置 margin 来撑开距离，否则一直是这个规则。</p><p>这个时候 <strong><code>BFC 的作用 3：可以包含浮动元素——清除内部浮动</code></strong> 登场！</p><p>给父 div 加上 <code>overflow: hidden;</code></p><p><strong>清除浮动原理</strong>：触发父 div 的 BFC 属性，<strong>使下面的子 div 都处在父 div 的同一 BFC 区域之内</strong>，此时已成功清除浮动。</p><p><img src="https://lc-gold-cdn.xitu.io/dfe63a3d19cae8adf5fa.gif?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>还可以使父 div 向同一个方向浮动来达到清除浮动的目的，清除浮动的原理是两个 div 都位于同一个浮动的 BFC 区域之中。</p><h3 id="bfc-布局规则4-bfc-区域不会与-float-box-重叠。" tabindex="-1"><a class="header-anchor" href="#bfc-布局规则4-bfc-区域不会与-float-box-重叠。"><span>BFC 布局规则4：BFC 区域不会与 float box 重叠。</span></a></h3><p><img src="https://lc-gold-cdn.xitu.io/0e2c7b710c4a13111120.gif?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>上面 aside 盒子有一个浮动属性，覆盖了 main 盒子的内容，main 盒子没有清除 aside 盒子的浮动。只做了一个动作，就是<strong>触发自身的 BFC</strong>，然后就不在被 aside 盒子覆盖了。所以：<strong>BFC 的区域不会与 float box 重叠</strong>。</p><p>下面再来介绍一下 <strong><code>BFC 的作用 1：自适应两栏布局</code></strong> ：</p><p><img src="https://lc-gold-cdn.xitu.io/304255779293ba4c2082.gif?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>还是上面的代码，此时 BFC 的区域不会与 float box 重叠，因此<strong>会根据父 div 宽度，和 aside 的宽度，自适应宽度</strong>。</p><h3 id="bfc-与-layout" tabindex="-1"><a class="header-anchor" href="#bfc-与-layout"><span>BFC 与 Layout</span></a></h3><p>IE 作为浏览器中的奇葩，当然不可能按部就班的支持 BFC 标准，于是乎 IE 中就有了 Layout 这个东西。<strong>Layout 和 BFC 基本是等价的</strong>，为了处理 IE 的兼容性，在需要触发 BFC 时吗，我们除了需要用触发条件中的 CSS 属性来触发 BFC，还需要针对 IE 浏览器使用 <strong><code>zoom: 1</code></strong> 来触发 IE 浏览器的 Layout。</p><p>以上的几个例子都体现了 BFC 布局规则的第 5 条——</p><h3 id="bfc-布局规则5-bfc-就是页面上的一个隔离的独立容器-容器里面的子元素不会影响到外面的元素。反之亦然。" tabindex="-1"><a class="header-anchor" href="#bfc-布局规则5-bfc-就是页面上的一个隔离的独立容器-容器里面的子元素不会影响到外面的元素。反之亦然。"><span>BFC 布局规则5：BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之亦然。</span></a></h3><hr><p><strong>文本环绕 float</strong>：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> #AAA<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span> width: 30px; height: 30px; background: red;<span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://lc-gold-cdn.xitu.io/c02b2396d987f4d7439a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>问题：为什么灰色背景的 div 左上角被覆盖后，红色 div 被覆盖，但是文本却没有被覆盖？</p><p><strong>解决</strong>：</p><p><strong>float 的定义和用法</strong>：</p><p>float 属性定义元素在哪个方向上浮动。以往这个属性总应用于图像，<strong>使文本围绕在图像周围</strong>，不过在 CSS 中，<strong>任何元素都可以浮动</strong>。浮动元素会生成一个块级框，而不论它本身是何种元素。</p><p><img src="https://lc-gold-cdn.xitu.io/5994ed11ebc3e4b971db.gif?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>从上图可以看到，float 属性确实生效，将 float 隐藏后，下面还有一个红色的 div，这个 div 是被黑色 div 所覆盖掉的。<strong>div 会被 float 覆盖，而文本却没有被 float 覆盖</strong>，是因为 <strong>float 当初设计的时候就是为了使文本围绕在浮动对象的周围。</strong></p>`,43))])}const k=e(r,[["render",g],["__file","BFC.html.vue"]]),m=JSON.parse('{"path":"/blogs/CSS/BFC.html","title":"BFC","lang":"zh-CN","frontmatter":{"title":"BFC","date":"2019-9-9","editLink":false,"tags":["CSS"],"categories":["前端"]},"headers":[{"level":2,"title":"什么是BFC（Block Formatting Context）？","slug":"什么是bfc-block-formatting-context","link":"#什么是bfc-block-formatting-context","children":[]},{"level":2,"title":"如何触发 BFC ？","slug":"如何触发-bfc","link":"#如何触发-bfc","children":[]},{"level":2,"title":"BFC 布局规则","slug":"bfc-布局规则","link":"#bfc-布局规则","children":[]},{"level":2,"title":"BFC 有哪些作用？","slug":"bfc-有哪些作用","link":"#bfc-有哪些作用","children":[{"level":3,"title":"BFC 布局规则1：内部的 Box 会在垂直方向， 一个接一个地放置","slug":"bfc-布局规则1-内部的-box-会在垂直方向-一个接一个地放置","link":"#bfc-布局规则1-内部的-box-会在垂直方向-一个接一个地放置","children":[]},{"level":3,"title":"BFC 布局规则2：Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠","slug":"bfc-布局规则2-box-垂直方向的距离由-margin-决定。属于同一个-bfc-的两个相邻-box-的-margin-会发生重叠","link":"#bfc-布局规则2-box-垂直方向的距离由-margin-决定。属于同一个-bfc-的两个相邻-box-的-margin-会发生重叠","children":[]},{"level":3,"title":"BFC 布局规则3：每个元素的 margin box 的左边，与包含块 border-box 的左边相接触（对于从左向右的格式化，否则相反）。即使存在浮动也是如此。","slug":"bfc-布局规则3-每个元素的-margin-box-的左边-与包含块-border-box-的左边相接触-对于从左向右的格式化-否则相反-。即使存在浮动也是如此。","link":"#bfc-布局规则3-每个元素的-margin-box-的左边-与包含块-border-box-的左边相接触-对于从左向右的格式化-否则相反-。即使存在浮动也是如此。","children":[]},{"level":3,"title":"BFC 布局规则4：BFC 区域不会与 float box 重叠。","slug":"bfc-布局规则4-bfc-区域不会与-float-box-重叠。","link":"#bfc-布局规则4-bfc-区域不会与-float-box-重叠。","children":[]},{"level":3,"title":"BFC 与 Layout","slug":"bfc-与-layout","link":"#bfc-与-layout","children":[]},{"level":3,"title":"BFC 布局规则5：BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之亦然。","slug":"bfc-布局规则5-bfc-就是页面上的一个隔离的独立容器-容器里面的子元素不会影响到外面的元素。反之亦然。","link":"#bfc-布局规则5-bfc-就是页面上的一个隔离的独立容器-容器里面的子元素不会影响到外面的元素。反之亦然。","children":[]}]}],"git":{"createdTime":1739535625000,"updatedTime":1739535625000,"contributors":[{"name":"sankigan","email":"sankigan@tencent.com","commits":1}]},"filePathRelative":"blogs/CSS/BFC.md"}');export{k as comp,m as data};
