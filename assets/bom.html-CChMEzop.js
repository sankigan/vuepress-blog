import{_ as a,c as s,e as n,o as e}from"./app-CRUSJUWc.js";const o={};function i(l,t){return e(),s("div",null,t[0]||(t[0]=[n(`<h1 id="bom" tabindex="-1"><a class="header-anchor" href="#bom"><span>BOM</span></a></h1><h2 id="window-对象" tabindex="-1"><a class="header-anchor" href="#window-对象"><span>Window 对象</span></a></h2><h2 id="location-对象" tabindex="-1"><a class="header-anchor" href="#location-对象"><span>Location 对象</span></a></h2><p>Location接口表示其链接到的对象的位置（URL）。所做的修改反映在与之相关的对象上。<code>document</code>和<code>window</code>接口都有这样一个链接的Location，分别通过<code>document.location</code>和<code>window.location</code>访问（引用的是同一个对象）。</p><table><thead><tr><th>属性名</th><th>例子</th><th>说明</th></tr></thead><tbody><tr><td>hash</td><td>&quot;#contents&quot;</td><td>返回URL中的hash（#后跟零或多个字符）</td></tr><tr><td>host</td><td>&quot;www.wrox.com:80&quot;</td><td>返回服务器名称和端口号（如果有）</td></tr><tr><td>hostname</td><td>&quot;www.wrox.com&quot;</td><td>返回不带端口号的服务器名称</td></tr><tr><td>href</td><td>&quot;https:/www.wrox.com&quot;</td><td>返回当前加载页面的完整URL</td></tr><tr><td>pathname</td><td>&quot;/WileyCDA/&quot;</td><td>返回URL中的目录和（或）文件名</td></tr><tr><td>port</td><td>&quot;8080&quot;</td><td>返回URL中指定的端口号（如果有）</td></tr><tr><td>protocol</td><td>&quot;https:&quot;</td><td>返回页面使用的协议</td></tr><tr><td>search</td><td>&quot;?q=javascript</td><td>返回URL的查询字符串（以?开头）</td></tr></tbody></table><p>每次修改location的属性（hash除外），页面都会以新URL重新加载。</p><h3 id="location-assign" tabindex="-1"><a class="header-anchor" href="#location-assign"><span>location.assign()</span></a></h3><p><code>location.assign(url)</code>方法会触发窗口加载并显示指定的URL的内容。</p><h3 id="location-replace" tabindex="-1"><a class="header-anchor" href="#location-replace"><span>location.replace()</span></a></h3><p><code>location.replace(url)</code>方法以给定的URL来替换当前的资源。与<code>assign()</code>方法不同的是调用<code>replace()</code>方法后，当前页面不会保存到会话历史中，这样用户点击回退按钮将不会再跳转到该页面。</p><h3 id="location-reload" tabindex="-1"><a class="header-anchor" href="#location-reload"><span>location.reload()</span></a></h3><p><code>location.reload([forcedReload])</code>方法用来刷新当前页面。该方法只有一个可选参数，当值为<code>true</code>时，将强制浏览器从服务器加载页面资源，否则当值为<code>false</code>或者未传参时，浏览器则可能从缓存中读取页面。</p><h2 id="history-对象" tabindex="-1"><a class="header-anchor" href="#history-对象"><span>History 对象</span></a></h2><p>History接口允许操作浏览器的曾经在标签页或者框架里访问的会话历史记录。<code>window.history</code>是一个只读属性，用来获取History对象的引用。</p><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>history.length</td><td>表示会话历史中元素的数目，包括当前加载的页</td></tr><tr><td>history.scrollRestoration</td><td>允许web应用程序在历史导航上显式地设置默认滚动恢复行为，此属性可以是自动的（auto）或者手动的（manual）</td></tr><tr><td>history.state</td><td>返回一个表示历史堆栈顶部地状态的值</td></tr></tbody></table><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>history.back()</td><td>前往上一页，等价于<code>history.go(-1)</code></td></tr><tr><td>history.forward()</td><td>前往下一页，等价于<code>history.go(1)</code></td></tr><tr><td>history.go()</td><td>通过当前页面的相对位置从浏览器历史记录加载页面</td></tr><tr><td><strong>history.pushState()</strong></td><td>按指定的名称和URL将数据push进会话历史栈</td></tr><tr><td><strong>history.replaceState()</strong></td><td>按指定的数据，名称和URL，更新历史栈上最新的入口</td></tr></tbody></table><h3 id="history-pushstate" tabindex="-1"><a class="header-anchor" href="#history-pushstate"><span>history.pushState()</span></a></h3><p>执行<code>pushState</code>函数之后，会往浏览器的历史记录中添加一条新记录，同时改变地址栏的地址内容。它可以接收三个参数，按顺序分别为：</p><ol><li>状态对象——一个对象或者字符串，用于描述新记录的一些特性。这个参数会被一并添加到历史记录中，以供以后使用。这个参数是开发者根据自己的需要自由给出的。无论什么时候用户导航到新的状态，popstate事件就会被触发，且该事件的state属性包含该历史条目状态对象的副本。</li><li>标题——一个字符串，目前这个参数被忽略，但未来可能会用到。传递一个空字符串在这里是安全的，而在将来这是不安全的。二选一的话，你可以为跳转的state传递一个短标题。</li><li>URL——一个字符串，该参数定义了新的历史URL记录。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;profile&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&quot;My Profile&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/profile/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当用户点击浏览器的「前进」、「后退」按钮时，就会触发<code>popstate</code>事件。你可以监听这一事件，从而作出反应。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;popstate&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> state <span class="token operator">=</span> e<span class="token punctuation">.</span>state<span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">// do something...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>e.state</code>就是当初<code>pushState</code>时传入的第一个参数。</p><h3 id="history-replacestate" tabindex="-1"><a class="header-anchor" href="#history-replacestate"><span>history.replaceState()</span></a></h3><p><code>history.replaceState()</code> 的使用与 <code>history.pushState()</code> 非常相似，区别在于 <code>replaceState()</code>是修改了当前的历史记录项而不是新建一个。</p><h2 id="navigator-对象" tabindex="-1"><a class="header-anchor" href="#navigator-对象"><span>Navigator 对象</span></a></h2><h2 id="screen-对象" tabindex="-1"><a class="header-anchor" href="#screen-对象"><span>Screen 对象</span></a></h2>`,27)]))}const r=a(o,[["render",i],["__file","bom.html.vue"]]),d=JSON.parse('{"path":"/blogs/javascript/bom.html","title":"BOM","lang":"zh-CN","frontmatter":{"title":"BOM","date":"2019-9-6","editLink":false,"tags":["JavaScript"],"categories":["前端"]},"headers":[{"level":2,"title":"Window 对象","slug":"window-对象","link":"#window-对象","children":[]},{"level":2,"title":"Location 对象","slug":"location-对象","link":"#location-对象","children":[{"level":3,"title":"location.assign()","slug":"location-assign","link":"#location-assign","children":[]},{"level":3,"title":"location.replace()","slug":"location-replace","link":"#location-replace","children":[]},{"level":3,"title":"location.reload()","slug":"location-reload","link":"#location-reload","children":[]}]},{"level":2,"title":"History 对象","slug":"history-对象","link":"#history-对象","children":[{"level":3,"title":"history.pushState()","slug":"history-pushstate","link":"#history-pushstate","children":[]},{"level":3,"title":"history.replaceState()","slug":"history-replacestate","link":"#history-replacestate","children":[]}]},{"level":2,"title":"Navigator 对象","slug":"navigator-对象","link":"#navigator-对象","children":[]},{"level":2,"title":"Screen 对象","slug":"screen-对象","link":"#screen-对象","children":[]}],"git":{"createdTime":1739535625000,"updatedTime":1739535625000,"contributors":[{"name":"sankigan","email":"sankigan@tencent.com","commits":1}]},"filePathRelative":"blogs/javascript/bom.md"}');export{r as comp,d as data};
