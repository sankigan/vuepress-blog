import{_ as n,c as d,a as o,e as c,d as a,b as s,r,o as l}from"./app-CRUSJUWc.js";const i={},m={href:"https://leetcode.cn/problems/merge-sorted-array/description/",target:"_blank",rel:"noopener noreferrer"};function p(u,e){const t=r("ExternalLinkIcon");return l(),d("div",null,[o("blockquote",null,[o("p",null,[o("a",m,[e[0]||(e[0]=a("合并两个有序数组")),s(t)])])]),e[1]||(e[1]=c(`<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给你两个按 非递减顺序 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p><p>请你 合并 <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><p>注意：最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m</code> + <code>n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p><p><strong>示例</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,6))])}const h=n(i,[["render",p],["__file","88.html.vue"]]),_=JSON.parse('{"path":"/blogs/algorithm/leetcode/88.html","title":"<LeetCode> 88. 合并两个有序数组","lang":"zh-CN","frontmatter":{"title":"<LeetCode> 88. 合并两个有序数组","date":"2025-2-14","tags":["LeetCode"],"categories":["算法"]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]}],"git":{"createdTime":1739535625000,"updatedTime":1739535625000,"contributors":[{"name":"sankigan","email":"sankigan@tencent.com","commits":1}]},"filePathRelative":"blogs/algorithm/leetcode/88.md"}');export{h as comp,_ as data};
