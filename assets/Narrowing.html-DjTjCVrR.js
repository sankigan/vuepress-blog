import{_ as s,c as a,e,o as t}from"./app-CRUSJUWc.js";const p={};function i(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="typescript-の-narrowing" tabindex="-1"><a class="header-anchor" href="#typescript-の-narrowing"><span>TypeScript の Narrowing</span></a></h1><p>TypeScript 的类型检查器会考虑到这些类型保护和赋值语句，而这个<strong>将类型推导为更精确类型的过程，我们称之为收窄(narrowing)</strong>。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// Case1</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">padLeft</span><span class="token punctuation">(</span>padding<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> padding <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>padding <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> input<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> padding <span class="token operator">+</span> input<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typeof-类型保护-type-guards" tabindex="-1"><a class="header-anchor" href="#typeof-类型保护-type-guards"><span>typeof 类型保护 (type guards)</span></a></h2><h2 id="真值收窄-truthiness-narrowing" tabindex="-1"><a class="header-anchor" href="#真值收窄-truthiness-narrowing"><span>真值收窄 (Truthiness narrowing)</span></a></h2><h2 id="等值收窄-equality-narrowing" tabindex="-1"><a class="header-anchor" href="#等值收窄-equality-narrowing"><span>等值收窄 (Equality narrowing)</span></a></h2><h2 id="in-操作符收窄" tabindex="-1"><a class="header-anchor" href="#in-操作符收窄"><span>in 操作符收窄</span></a></h2><h2 id="instanceof-收窄" tabindex="-1"><a class="header-anchor" href="#instanceof-收窄"><span>instanceof 收窄</span></a></h2><h2 id="赋值语句" tabindex="-1"><a class="header-anchor" href="#赋值语句"><span>赋值语句</span></a></h2><h2 id="控制流分析-control-flow-analysis" tabindex="-1"><a class="header-anchor" href="#控制流分析-control-flow-analysis"><span>控制流分析 (Control flow analysis)</span></a></h2><p>在 Case1 中，第一个 if 语句，因为有 return 语句，TypeScript 就能通过代码分析，判断出在剩余的部分 <code>return padding + input</code>，如果 padding 是 number 类型，是无法达到 (unreachable) 这里的，所以在剩余的部分，就会将 number 类型从 number | string 类型中删除掉。</p><p>这种基于**可达性(reachability)**的代码分析就叫做控制流分析(Control flow analysis)。在遇到类型保护和赋值语句的时候，TypeScript 就是使用这样的方式收窄类型。而使用这种方式，一个变量可以被观察到变为不同的类型：</p><p><img src="https://camo.githubusercontent.com/20af38f788785d0d679c41fb5a30716dab8b06f73c4a85b2c6a00bd2050a3108/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6d717971696e6766656e672f706963747572652f2545362538452541372545352538382542362545362542352538312545352538382538362545362539452539302e706e67" alt=""></p><h2 id="类型判断式-type-predicates" tabindex="-1"><a class="header-anchor" href="#类型判断式-type-predicates"><span>类型判断式 (type predicates)</span></a></h2><p>如果你想直接通过代码控制类型的改变，你可以自定义一个类型保护。实现方式是定义一个函数，这个函数返回的类型是类型判断式：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">isFish</span><span class="token punctuation">(</span>pet<span class="token operator">:</span> Fish <span class="token operator">|</span> Bird<span class="token punctuation">)</span><span class="token operator">:</span> pet <span class="token keyword">is</span> Fish <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>pet <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">.</span>swim <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面这个例子中，<code>pet is fish</code> 就是我们的类型判断式，一个类型判断式采用 <code>parameterName is Type</code> 的形式，但 <code>parameterName</code> 必须是当前函数的参数名。</p><p>当 isFish 被传入变量进行调用，TypeScript 就可以将这个变量收窄到更具体的类型：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">let</span> pet <span class="token operator">=</span> <span class="token function">getSmallPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFish</span><span class="token punctuation">(</span>pet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  pet<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  pet<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19)]))}const o=s(p,[["render",i],["__file","Narrowing.html.vue"]]),r=JSON.parse('{"path":"/blogs/TypeScript/Narrowing.html","title":"TypeScript 类型收窄","lang":"zh-CN","frontmatter":{"title":"TypeScript 类型收窄","date":"2021-4-23","editLink":false,"tags":["TypeScript"],"categories":["前端"]},"headers":[{"level":2,"title":"typeof 类型保护 (type guards)","slug":"typeof-类型保护-type-guards","link":"#typeof-类型保护-type-guards","children":[]},{"level":2,"title":"真值收窄 (Truthiness narrowing)","slug":"真值收窄-truthiness-narrowing","link":"#真值收窄-truthiness-narrowing","children":[]},{"level":2,"title":"等值收窄 (Equality narrowing)","slug":"等值收窄-equality-narrowing","link":"#等值收窄-equality-narrowing","children":[]},{"level":2,"title":"in 操作符收窄","slug":"in-操作符收窄","link":"#in-操作符收窄","children":[]},{"level":2,"title":"instanceof 收窄","slug":"instanceof-收窄","link":"#instanceof-收窄","children":[]},{"level":2,"title":"赋值语句","slug":"赋值语句","link":"#赋值语句","children":[]},{"level":2,"title":"控制流分析 (Control flow analysis)","slug":"控制流分析-control-flow-analysis","link":"#控制流分析-control-flow-analysis","children":[]},{"level":2,"title":"类型判断式 (type predicates)","slug":"类型判断式-type-predicates","link":"#类型判断式-type-predicates","children":[]}],"git":{"createdTime":1739535625000,"updatedTime":1739535625000,"contributors":[{"name":"sankigan","email":"sankigan@tencent.com","commits":1}]},"filePathRelative":"blogs/TypeScript/Narrowing.md"}');export{o as comp,r as data};
