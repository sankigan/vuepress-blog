import{_ as t,c as p,e,a as n,d as c,b as l,r as o,o as i}from"./app-CRUSJUWc.js";const u={},r={href:"https://wufenfen.github.io/2017/03/13/%E3%80%90%E8%AF%91%E3%80%91%E7%90%86%E8%A7%A3%E5%85%B3%E9%94%AE%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84/",target:"_blank",rel:"noopener noreferrer"};function k(d,s){const a=o("ExternalLinkIcon");return i(),p("div",null,[s[1]||(s[1]=e(`<h1 id="浏览器的渲染过程与原理" tabindex="-1"><a class="header-anchor" href="#浏览器的渲染过程与原理"><span>浏览器的渲染过程与原理</span></a></h1><h2 id="_1、关键渲染路径" tabindex="-1"><a class="header-anchor" href="#_1、关键渲染路径"><span>1、关键渲染路径</span></a></h2><p><strong>关键渲染路径(Critical Rendering Path)</strong> 是指与当前用户操作有关的内容。例如用户刚刚打开一个页面，首屏的显示就是当前用户操作相关的内容，具体就是浏览器接收到HTML、CSS 和 JavaScript 等资源并对其进行处理从而渲染出 Web 页面。</p><p>了解浏览器渲染的过程与原理，很大程度上是为了<strong>优化关键渲染路径</strong>，但优化应该是针对具体问题的解决方案，所以优化没有一定之规。例如为了保障<strong>首屏内容</strong>的最快速显示，通常会提到渐进式页面渲染，但是为了<strong>渐进式页面渲染</strong>，就需要做资源的拆分，那么以什么粒度拆分、要不要拆分，不同页面、不同场景策略不同。具体方案的确定既要考虑体验问题，也要考虑工程问题。</p><h2 id="_2、浏览器渲染页面的过程" tabindex="-1"><a class="header-anchor" href="#_2、浏览器渲染页面的过程"><span>2、浏览器渲染页面的过程</span></a></h2><p><img src="https://user-images.githubusercontent.com/25027560/46640050-6420ad80-cb9c-11e8-991f-4f039e0eb4a9.png" alt=""></p><ol><li>处理 HTML 标记并构建 DOM 树</li><li>处理 CSS 标记并构建 CSSOM 树</li><li>将 DOM 和 CSSOM 合并成一个渲染树</li><li>根据渲染树来布局，以计算每个结点的几何信息</li><li>调用 GPU 绘制，合成图层，显示在屏幕上</li></ol><p>这5个步骤<strong>并不一定一次性顺序完成</strong>。如果 DOM 或 CSSOM 被修改，以上过程需要重复执行，这样才能计算出哪些像素需要在屏幕上进行重新渲染。实际页面中，CSS 与 JavaScript 往往会多次修改 DOM 和 CSSOM，下面就介绍它们的影响方式。</p><h2 id="_3、阻塞渲染-css-与-javascript" tabindex="-1"><a class="header-anchor" href="#_3、阻塞渲染-css-与-javascript"><span>3、阻塞渲染：CSS 与 JavaScript</span></a></h2><p>谈论资源的阻塞时，我们要清楚，现代浏览器总是并行加载资源。例如，当HTML解析器（HTML Parser）被脚本阻塞时，解析器虽然会停止构建DOM，但<strong>仍会识别该脚本后面的资源，并进行预加载</strong>。</p><p>同时，由于下面两点：</p><p><strong><code>1. 默认情况下，CSS 被视为阻塞渲染的资源，这意味着浏览器将不会渲染任何已处理的内容，直至 CSSOM 构建完毕。</code></strong></p><p><strong><code>2. JavaScript不仅可以读取和修改 DOM 属性，还可以读取和修改 CSSOM 属性。</code></strong></p><p>存在阻塞的 CSS 资源时，浏览器会延迟 JavaScript 的执行和 DOM 的构建。另外：</p><p><strong><code>1. 当浏览器遇到一个 script 标记时，DOM 构建将暂停，直至脚本完成执行。</code></strong></p><p><strong><code>2. JavaScript 可以查询和修改 DOM 与 CSSOM。</code></strong></p><p><strong><code>3. CSSOM 构建时，JavaScript 执行将暂停，直至 CSSOM 就绪。</code></strong></p><p>所以，script 标签的位置很重要。实际使用时，可以遵循下面两个原则：</p><p><strong><code>1. CSS 优先：引入顺序上，CSS 资源先于 JavaScript 资源。</code></strong></p><p><strong><code>2. JavaScript 应尽量少影响 DOM 的构建。</code></strong></p><p>浏览器的发展日益加快，具体的渲染策略会不断进化，但了解这些原理后，就能想通它进化的逻辑。下面来看看 CSS 与 JavaScript 具体会怎样阻塞资源。</p><hr><h3 id="css" tabindex="-1"><a class="header-anchor" href="#css"><span>CSS</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"> <span class="token selector">p</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的 link 标签会被视为阻塞渲染的资源，浏览器会优先处理这些 CSS 资源，直至 CSSOM 构建完毕。</p><p>渲染树（Render-Tree）的关键渲染路径中，要求同时具有 DOM 和 CSSOM，之后才会构建渲染树。即，HTML 和 CSS 都是阻塞渲染的资源。HTML 显然是必需的，因为包括我们希望显示的文本在内的内容，都在 DOM 中存放，那么可以从 CSS 上想办法。</p><p>最容易想到的当然是<strong>精简 CSS 并尽快提供它</strong>。除此之外，还可以用媒体类型和媒体查询来解除对渲染的阻塞。</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>print.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>print<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>other.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(min-width: 30em) and (orientation: landscape)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一个资源会加载并阻塞</li><li>第二个资源设置了媒体类型，会加载但不会阻塞，print 声明只在打印网页时使用</li><li>第三个资源提供了媒体查询，会在符合条件时阻塞渲染</li></ul><hr><h3 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>JavaScript</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Do not go gentle into that good night,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;inline&quot;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Old age should burn and rave at close of day;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Rage, rage against the dying of the light.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Do not go gentle into that good night,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Old age should burn and rave at close of day;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;inline&quot;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Rage, rage against the dying of the light.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的 script 标签会阻塞 HTML 解析，无论是不是 inline-script。上面的 p 标签会从上到下解析，这个过程会被两段 JavaScript 分别打断一次（加载、执行）。</p><p>所以实际工程中，我们常常将资源放到文档底部。</p><h3 id="改变阻塞模式-defer-与-async" tabindex="-1"><a class="header-anchor" href="#改变阻塞模式-defer-与-async"><span>改变阻塞模式：defer 与 async</span></a></h3><p>为什么要将 script 加载的 defer 与 async 方式放到后面呢？因为这两种方式的出现，全是由于前面讲的那些阻塞条件的存在。换句话说，defer 与 async 方式可以改变之前的那些阻塞情形。</p><p>首先，注意 async 与 defer 属性对于 inline-script 都是无效的，所以下面这个示例中三个 script 标签的代码会从上到下依次执行。</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，defer 与 async 都是针对设置了 src 属性的 script 标签。</p><p><img src="http://images2018.cnblogs.com/blog/1414709/201808/1414709-20180822191511672-1951871802.png" alt=""></p><h3 id="defer" tabindex="-1"><a class="header-anchor" href="#defer"><span>defer</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>app1.js<span class="token punctuation">&#39;</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>app2.js<span class="token punctuation">&#39;</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>app3.js<span class="token punctuation">&#39;</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>defer 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时<strong>HTML 并未停止解析</strong>，这两个过程是并行的。整个 document 解析完毕且 defer-script 也加载完成之后（这两件事情的顺序无关），会执行所有由 defer-script 加载 JavaScript 代码，然后触发 DOMContentLoaded 事件。</p><p>defer 不会改变 script 中代码的执行顺序，示例代码会按照1、2、3的顺序执行。所以，defer 与普通 script 相比，有两点区别：</p><ol><li>载入 JavaScript 文件时不阻塞 HTML 的解析</li><li>执行阶段被放到 HTML 标签解析完成之后</li></ol><h3 id="async" tabindex="-1"><a class="header-anchor" href="#async"><span>async</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>app.js<span class="token punctuation">&#39;</span></span> <span class="token attr-name">async</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>ad.js<span class="token punctuation">&#39;</span></span> <span class="token attr-name">async</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>statistics.js<span class="token punctuation">&#39;</span></span> <span class="token attr-name">async</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>async 属性表示异步执行引入的 JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行——无论此刻是 HTML 解析阶段还是 DOMContentLoaded 触发之后。需要注意的是，这种方法加载的 JavaScript 依然会阻塞 load 事件。换句话说，async-script 可能在 DOMContentLoaded 触发之前或之后执行，但一定在 load 触发之前执行。</p><p>从上一段也能推出，多个 async-script 的执行顺序是不确定的。值得注意的是，向 document 动态添加 script 标签时，async 属性默认是 true。</p><h3 id="document-createelement" tabindex="-1"><a class="header-anchor" href="#document-createelement"><span>document.createElement</span></a></h3><p>使用 <code>document.createElement</code> 创建的 script 默认是异步的，示例如下。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>async<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>所以，通过动态添加 script 标签引入 JavaScript 文件默认是不会阻塞页面的。如果想同步执行，需要将 async 属性手动设置为 false。</p><h3 id="document-write-与-innerhtml" tabindex="-1"><a class="header-anchor" href="#document-write-与-innerhtml"><span>document.write 与 innerHTML</span></a></h3><p>通过 <code>document.write</code> 添加的 link 或 script 标签都相当于在 document 中添加的标签，因为它操作的是 document stream（所以对于 loaded 状态的页面使用 <code>document.write</code> 会自动调用 <code>document.open</code>，这会覆盖原有文档内容）。即正常情况下，link 会阻塞渲染，script 会同步执行。不过这是不推荐的方式，chrome 已经会显示警告，提示未来有可能禁止这样的引入。如果给这种方式引入的 script 添加 async 属性，chrome 会检查是否同源，对于非同源的 async-script 是不允许这样引入的。</p><p>如果使用 innerHTML 引入 script 标签，其中的 JavaScript 不会执行。当然，可以通过 <code>eval()</code> 来手动处理，不过不推荐。如果引入 link 标签，我试验过在 chrome 中是可以起作用的。</p>`,56)),n("blockquote",null,[n("p",null,[n("a",r,[s[0]||(s[0]=c("【译】理解关键渲染路径")),l(a)])])])])}const m=t(u,[["render",k],["__file","browser-rendering.html.vue"]]),v=JSON.parse('{"path":"/blogs/network-browser/browser-rendering.html","title":"浏览器的渲染过程与原理","lang":"zh-CN","frontmatter":{"title":"浏览器的渲染过程与原理","date":"2019-9-9","editLink":false,"tags":["网络与浏览器"],"categories":["前端"]},"headers":[{"level":2,"title":"1、关键渲染路径","slug":"_1、关键渲染路径","link":"#_1、关键渲染路径","children":[]},{"level":2,"title":"2、浏览器渲染页面的过程","slug":"_2、浏览器渲染页面的过程","link":"#_2、浏览器渲染页面的过程","children":[]},{"level":2,"title":"3、阻塞渲染：CSS 与 JavaScript","slug":"_3、阻塞渲染-css-与-javascript","link":"#_3、阻塞渲染-css-与-javascript","children":[{"level":3,"title":"CSS","slug":"css","link":"#css","children":[]},{"level":3,"title":"JavaScript","slug":"javascript","link":"#javascript","children":[]},{"level":3,"title":"改变阻塞模式：defer 与 async","slug":"改变阻塞模式-defer-与-async","link":"#改变阻塞模式-defer-与-async","children":[]},{"level":3,"title":"defer","slug":"defer","link":"#defer","children":[]},{"level":3,"title":"async","slug":"async","link":"#async","children":[]},{"level":3,"title":"document.createElement","slug":"document-createelement","link":"#document-createelement","children":[]},{"level":3,"title":"document.write 与 innerHTML","slug":"document-write-与-innerhtml","link":"#document-write-与-innerhtml","children":[]}]}],"git":{"createdTime":1739535625000,"updatedTime":1739535625000,"contributors":[{"name":"sankigan","email":"sankigan@tencent.com","commits":1}]},"filePathRelative":"blogs/network-browser/browser-rendering.md"}');export{m as comp,v as data};
