import{_ as l,c as i,e as o,o as t}from"./app-CRUSJUWc.js";const a={};function p(r,e){return t(),i("div",null,e[0]||(e[0]=[o('<h2 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc"><span>MVC</span></a></h2><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020105.png" alt="MVC"></p><p>M（Model）：数据保存</p><p>V（View）：用户页面</p><p>C（Controller）：业务逻辑</p><p>所有通信都是单向的。</p><ol><li><p>View传指令到Controller。</p></li><li><p>Controller完成业务逻辑后，要求Model改变状态。</p></li><li><p>Model将新的数据发送到View，用户得到反馈。</p></li></ol><h2 id="mvp" tabindex="-1"><a class="header-anchor" href="#mvp"><span>MVP</span></a></h2><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020109.png" alt="MVP"></p><p>M（Model）是业务逻辑层，主要负责数据，网络请求等操作</p><p>V（View）是视图层，负责绘制UI元素、与用户进行交互</p><p>P（Presenter）是View与Model交互的中间纽带，处理与用户交互的逻辑</p><p>MVP模式将Controller改名为Presenter，同时改变了通信方向。</p><ol><li><p>各部分之间的通信，都是双向的。</p></li><li><p>View与Model不发生联系，都通过Presenter传递。</p></li><li><p>View非常薄，不部署任何业务逻辑，称为“被动视图”，即没有任何主动性，而Presenter非常厚，所有业务逻辑都部署在那里。</p></li></ol><h2 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm"><span>MVVM</span></a></h2><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020110.png" alt="MVVM"></p><p>MVVM是<code>Model-View-ViewModel</code>的缩写。MVVM是一种设计思想。Model层代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑；View代表UI组件，它负责将数据模型转换成UI展现出来，ViewModel是一个同步View和Model的对象。</p><p>在MVVM架构下，View和Model之间并没有直接的联系，而是通过ViewModel进行交互，Model和ViewModel之间的交互是双向的，因此View数据的变化会同步到Model中，而Model数据的变化也会立即反应到View上。</p><p>ViewModel通过<strong>双向数据绑定</strong>把View层和Model层连接了起来，而View和Model之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM，不需要关注数据状态的同步问题，复杂的数据状态维护完全由MVVM来统一管理。</p><h2 id="mvvm和mvc的区别" tabindex="-1"><a class="header-anchor" href="#mvvm和mvc的区别"><span>MVVM和MVC的区别？</span></a></h2><p>MVC也是一种设计思想，主要就是MVC中的Controlled演变成MVVM中的ViewModel。MVVM主要解决了MVC中大量的DOM操作使页面渲染性能降低，加载速度变慢，影响用户体验。和当Model频繁发送变化，开发者需要主动更新到View。</p><h2 id="数据的双向绑定" tabindex="-1"><a class="header-anchor" href="#数据的双向绑定"><span>数据的双向绑定</span></a></h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/23/166a031209fc8da5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="数据的双向绑定"></p><p>利用<code>Object.defineProperty()</code>对数据进行劫持，设置一个监听器<code>Observer</code>，用来监听所有属性，如果属性上发生变化了，就需要告诉订阅者<code>Watcher</code>去更新数据，最后指令解析器<code>Compile</code>解析对应的指令，进而会执行对应的更新函数，从而更新视图，实现双向绑定。</p>',24)]))}const d=l(a,[["render",p],["__file","mvvm.html.vue"]]),M=JSON.parse('{"path":"/blogs/vue/mvvm.html","title":"MVC、MVP 和 MVVM","lang":"zh-CN","frontmatter":{"title":"MVC、MVP 和 MVVM","date":"2021-4-20","editLink":false,"tags":["Vue"],"categories":["前端"]},"headers":[{"level":2,"title":"MVC","slug":"mvc","link":"#mvc","children":[]},{"level":2,"title":"MVP","slug":"mvp","link":"#mvp","children":[]},{"level":2,"title":"MVVM","slug":"mvvm","link":"#mvvm","children":[]},{"level":2,"title":"MVVM和MVC的区别？","slug":"mvvm和mvc的区别","link":"#mvvm和mvc的区别","children":[]},{"level":2,"title":"数据的双向绑定","slug":"数据的双向绑定","link":"#数据的双向绑定","children":[]}],"git":{"createdTime":1739535625000,"updatedTime":1739535625000,"contributors":[{"name":"sankigan","email":"sankigan@tencent.com","commits":1}]},"filePathRelative":"blogs/vue/mvvm.md"}');export{d as comp,M as data};
