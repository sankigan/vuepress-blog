import{_ as t,c,a as o,e as i,d as s,b as a,r as p,o as d}from"./app-CRUSJUWc.js";const r={},l={href:"https://github.com/amandakelake/blog/issues/43",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/amandakelake/blog/issues/13",target:"_blank",rel:"noopener noreferrer"};function u(h,e){const n=p("ExternalLinkIcon");return d(),c("div",null,[e[4]||(e[4]=o("h1",{id:"一、缓存",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#一、缓存"},[o("span",null,"一、缓存")])],-1)),o("blockquote",null,[o("p",null,[e[1]||(e[1]=s("参考了")),o("a",l,[e[0]||(e[0]=s("这篇文章")),a(n)])])]),e[5]||(e[5]=i('<h2 id="缓存的分类" tabindex="-1"><a class="header-anchor" href="#缓存的分类"><span>缓存的分类？</span></a></h2><p><img src="https://user-images.githubusercontent.com/25027560/38461517-c7f2f422-3b04-11e8-8e94-20bbeb2a32b8.png" alt="缓存分类"></p><blockquote><p>注：文章只讨论浏览器（客户端）缓存喔</p></blockquote><h2 id="缓存的一些应用场景" tabindex="-1"><a class="header-anchor" href="#缓存的一些应用场景"><span>缓存的一些应用场景？</span></a></h2><ol><li><p>每次都加载某个同样的静态文件 =&gt; 浪费带宽，重复请求 =&gt; <strong>让浏览器使用本地缓存（协商缓存，返回304）</strong></p></li><li><p>协商缓存还是要和服务器通信 =&gt; <strong>强制浏览器使用本地强缓存（返回200）</strong></p></li><li><p>缓存要更新，没有网络请求，怎么知道什么时候更新？ =&gt; <strong>让请求加上(header加上ETag)或者url的修改与文件内容关联（文件名加哈希值）</strong></p><blockquote><p>!!! 这个我有次面试被问到了了，然后一脸懵逼的说了不会...</p></blockquote></li></ol><hr><h1 id="二、浏览器的缓存机制-强缓存、协商缓存" tabindex="-1"><a class="header-anchor" href="#二、浏览器的缓存机制-强缓存、协商缓存"><span>二、浏览器的缓存机制：强缓存、协商缓存</span></a></h1><blockquote><p>话不多述，先上流程图 : )</p></blockquote><p><img src="https://user-images.githubusercontent.com/25027560/38223505-d8ab53da-371d-11e8-9263-79814b6971a5.png" alt=""></p><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p><strong>1. 基本原理</strong></p><ul><li>浏览器在加载资源时，根据请求头的<code>Expires</code>和<code>Cache-Control</code>判断是否命中<strong>强缓存</strong>，是则直接从缓存读取资源，不会发送请求到服务器。</li><li>如果没有命中强缓存，浏览器一定会发送一个请求到服务器，通过<code>Last-Modified</code>和<code>ETag</code>验证资源是否命中<strong>协商缓存</strong>，如果命中，服务器会将这个请求返回，但是不会返回这个资源的数据，依然是从缓存中读取资源</li><li>如果前两者都没有命中，直接从服务器加载资源</li></ul><p><strong>2. 相同点</strong></p><p>​ 如果命中，都是从客户端缓存中加载资源，而不是从服务器加载资源数据</p><p><strong>3. 不同点</strong></p><p>​ 强缓存不发请求到服务器，协商缓存会发送请求到服务器</p><h2 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存"><span>强缓存</span></a></h2><p>强缓存通过<code>Expires</code>和<code>Cache-Control</code>两种响应头实现</p><ol><li><p><strong><code>Expires</code></strong><code>Expires</code>是HTTP 1.0提出的一个表示资源过期时间的头部，它描述的是一个绝对的时间，由服务器返回。<code>Expires</code>受限于本地时间，如果修改了本地时间，可能会导致缓存失效。</p><p><code>Expires: Sat, Mar 16 2019 20:26:43 GMT</code></p></li><li><p><strong><code>Cache-Control</code></strong><code>Cache-Control</code>出现于HTTP 1.1，<strong>优先级高于<code>Expires</code></strong>，表示的是相对时间。</p><p><code>Cache-Control: max-age=315360000</code></p></li></ol><blockquote><p>原作者在这里顺带提及了Cache-Control指令的细节</p></blockquote><ul><li><code>Cache-Control: no-cache</code> 不会缓存数据到本地的说法是错误的（下图是《HTTP权威指南》p182内容） <img src="https://user-images.githubusercontent.com/25027560/38223488-c2bf4b76-371d-11e8-85ac-45fc8ed04dd4.png" alt=""></li><li><code>Cache-Control: no-store</code> 真正的不缓存数据到本地</li><li><code>Cache-Control: public</code> 可以被所有用户缓存（多用户共享），包括终端和CDN等中间代理服务器</li><li><code>Cache-Control: private</code> 只能被终端浏览器缓存（而且是私有缓存），不允许中继缓存服务器进行缓存 <img src="https://user-images.githubusercontent.com/25027560/38223493-c7ec919e-371d-11e8-8d72-8c6b0e4935a8.png" alt=""></li></ul><h2 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存"><span>协商缓存</span></a></h2><p>当浏览器对某个资源没有命中强缓存，就会发一个请求到服务器，验证协商缓存是否命中，如果协商缓存命中，请求响应返回的HTTP状态为<strong>304 Not Modified</strong>。</p><p>协商缓存利用的是<code>【Last-Modified, If-Modified-Since】</code>和<code>【ETag, If-None-Match】</code>这两对Header来管理。</p><ol><li><p><strong><code>Last-Modified, If-Modified-Since</code></strong><code>Last-Modified</code>表示本地文件最后修改日期，浏览器会在request header加上<code>If-Modified-Since</code>（上次返回的<code>Last-Modified</code>的值），询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来。 但是如果在本地打开缓存文件，就会造成<code>Last-Modified</code>被修改，所以HTTP 1.1 出现了<code>ETag</code>。</p></li><li><p><strong><code>ETag, If-None-Match</code></strong><code>ETag</code>就像一个指纹，资源变化都会导致<code>ETag</code>变化，跟最后修改时间没关系，<code>ETag</code>可以保证每一个资源是唯一的。 <code>If-None-Match</code>的Header会将上次的<code>ETag</code>发送给服务器，询问该资源的<code>ETag</code>是否有更新，有变动就会发送新的资源回来。</p><blockquote><p>下面这张图很形象地描述了这个过程</p></blockquote><p><img src="https://user-images.githubusercontent.com/25027560/38223495-d02aec3e-371d-11e8-92ae-fe7c729ab6e5.png" alt=""><strong><code>ETag</code>的优先级比<code>Last-Modified</code>更高</strong> 那么为什么要使用<code>ETag</code>呢？</p><ul><li>一些文件也许会周期性的更改，但是他的内容并不改变（仅仅改变了修改时间），这时我们并不希望客户端认为这个文件被修改而重新GET；</li><li>某些文件修改是非常频繁的，比如在秒以下的时间内进行修改（例如1s内修改了N次），<code>If-Modified-Since</code>能检查到的粒度是s级的，这种修改无法判断；</li><li>某些服务器不能精确的得到文件的最后修改时间。</li></ul></li></ol><h2 id="几种状态码的区别" tabindex="-1"><a class="header-anchor" href="#几种状态码的区别"><span>几种状态码的区别</span></a></h2><ul><li><p><code>200</code>：强缓存<code>Expires/Cache-Control</code>失效时，返回新的资源文件</p><blockquote><p>其实我觉得这里应该是强缓存和协商缓存都没有命中才会返回状态码200</p></blockquote></li><li><p><code>200(from disk cache)/200(from memory cache)</code>：强缓存<code>Expires/Cache-Control</code>两者都存在，未过期，<code>Cache-Control</code>优先<code>Expires</code>时，浏览器从本地获取资源成功</p></li><li><p><code>304(Not Modified)</code>：协商缓存<code>Last-Modified/ETag</code>没有过期时，服务器端返回状态码304</p></li></ul><p><strong><code>from memory cache</code>和<code>from disk cache</code>的区别</strong></p><p><code>from memory cache</code>：资源是直接从内存中拿到的，不会请求服务器，一般已经加载过该资源切换存在了内存当中，当关闭该页面时，此资源就被内存释放掉了，再次重新打开相同页面时不会出现<code>from memory cache</code>的情况</p><p><code>from disk cache</code>：同上类似，此资源是从磁盘当中取出的，也是在已经在之前的某个时间加载过该资源，不会请求服务器但是此资源不会随着该页面的关闭而释放掉，因为是存在硬盘当中的，下次打开仍会<code>from disk cache</code></p><hr><h1 id="三、数据存储-cookie、storage、indexeddb" tabindex="-1"><a class="header-anchor" href="#三、数据存储-cookie、storage、indexeddb"><span>三、数据存储：cookie、Storage、indexedDB</span></a></h1><h2 id="简单对比" tabindex="-1"><a class="header-anchor" href="#简单对比"><span>简单对比</span></a></h2><ol><li><code>cookie</code>：4K，可以手动设置失效期</li><li><code>localStorage</code>：5M，除非手动清除，否则一直存在</li><li><code>sessionStorage</code>：5M，不可以跨标签访问，页面关闭就清理</li><li><code>indexedDB</code>：浏览器端数据库，无限容量，除非手动清除，否则一直存在</li></ol><h2 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie"><span>cookie</span></a></h2><blockquote><p>cookie通过在客户端记录信息确定用户身份</p><p>session通过在服务器端记录信息确定用户身份</p></blockquote><p><strong>1. cookie机制</strong></p><p>一个用户的所有请求操作都应该属于同一个会话，而另一个用户的所有请求操作则应该属于另一个会话。</p><p>HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。</p><p>cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个cookie。客户端会把cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该cookie一同提交给服务器。服务器检查该cookie，以此来辨认用户状态。服务器还可以根据需要修改cookie的内容。</p><p>cookie的内容主要包括：名字、值、过期时间、路径和域。路径和域一起构成cookie的作用范围。</p><hr><p><strong>2. session机制</strong></p><p>session是另一种记录客户状态的机制，不同的是cookie保存在客户端浏览器中，而session保存在服务器上。</p><p>客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。客户端浏览器再次访问时只需要从该session中查找该客户的状态就可以了。</p><p><strong>如果说cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么session机制就是通过检查服务器上的“客户明细表”来确认客户身份</strong>。session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。</p><p>当程序需要为某个客户端的请求创建一个session时，</p><ul><li>服务器首先检查这个客户端的请求里是否包含了一个session标识——称为session id</li><li>如果已包含则说明以前已经为此客户端创建过session，服务器按照session id把这个session检索出来使用（检索不到，会新建一个）</li><li>如果客户端请求不包含session id，则为此客户端创建一个session并生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将会在本次响应中被返回给客户端保存</li></ul><hr><p>可以用<code>document.cookie</code>获取cookie，得到一个字符串，形式如<code>key1=value1; key2=value2</code>，需要用正则匹配需要的值。</p><p>cookie可以设置路径path，所以它要比另外两个多了一层访问限制 cookie可以通过设置domain属性值，可以不同二级域名下共享cookie，而Storage不可以，比如<code>http://image.baidu.com</code>的cookie<code>http://map.baidu.com</code>是可以访问的，前提是cookie的domain设置为<code>.http://baidu.com</code>，而Storage不可以</p><p><strong>缺点</strong>：在请求头带着数据，大小是4K之内，主domain污染。</p><p>常用的配置属性有以下几个：</p><p><strong><code>Expires</code></strong>：cookie最长有效期</p><p><strong><code>Max-Age</code></strong>：在cookie失效之前需要经过的秒数。(当<code>Expires</code>和<code>Max-Age</code>同时存在时，文档中给出的是以<code>Max-Age</code>为准，但是作者在Chrome中实验的结果是取二者中最长有效期的值)</p><p><strong><code>Domain</code></strong>：指定cookie可以送达的主机名</p><p><strong><code>Path</code></strong>：指定一个URL路径，这个路径必须出现在要请求的资源的路径中才可以发送cookie首部</p><p><strong><code>Secure</code></strong>：一个带有安全属性的cookie只有在请求使用SSL和HTTPS协议的时候才会被发送到服务器</p><p><strong><code>HttpOnly</code></strong>：设置了 <code>HttpOnly</code> 属性的cookie不能使用JavaScript经由<code>document.cookie</code>属性、XMLHttpRequest<code>和</code>Request APIs` 进行访问，以防范跨站脚本攻击（XSS）</p><h2 id="storage-localstorage、sessionstorage" tabindex="-1"><a class="header-anchor" href="#storage-localstorage、sessionstorage"><span>Storage：localStorage、sessionStorage</span></a></h2><p><strong>大小</strong>：官方建议是5M存储空间</p><p><strong>类型</strong>：只能操作字符串，在存储之前应该使用<code>JSON.stringify()</code>方法先进行一步安全转换字符串，取值时再用<code>JSON.parse()</code>方法再转换一次</p><p><strong>存储的内容</strong>：数组，图片，json，样式，脚本等（只要是能序列化成字符串的内容都可以存储）</p><p><strong>注意</strong>：数据是<strong>明文存储</strong>，毫无隐私性可言，<strong>绝对不能用于存储重要信息</strong></p><p><strong>区别</strong>：sessionStorage将数据临时存储在session中，浏览器关闭，数据随之消失，localStorage将数据存储在本地，理论上来说数据永远不会消失，除非人为删除</p><p>另外，不同浏览器无法共享localStorage和sessionStorage中的信息。同一浏览器的相同域名和端口的不同页面间可以共享相同的localStorage，但是不同页面间无法共享sessionStorage的信息。</p><p><strong>1. 基础操作API</strong></p><p><strong>保存数据</strong></p><p><code>lcoalStorage.setItem(key, value);</code><code>sessionStorage.setItem(key, value);</code></p><p><strong>读取数据</strong></p><p><code>lcoalStorage.getItem(key);</code><code>sessionStorage.getItem(key);</code></p><p><strong>删除单个数据</strong></p><p><code>lcoalStorage.removeItem(key);</code><code>sessionStorage.removeItem(key);</code></p><p><strong>删除全部数据</strong></p><p><code>lcoalStorage.clear();</code><code>sessionStorage.clear();</code></p><p><strong>获取索引的key</strong></p><p><code>lcoalStorage.key(index);</code><code>sessionStorage.key(index);</code></p><p><strong>2. 监听storage事件</strong></p><p>可以通过监听window对象的storage事件并指定其事件处理函数，当页面中对 localStorage 或 sessionStorage 进行修改时，则会触发对应的处理函数</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;storage&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">key=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, oldValue=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span>oldValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, newValue=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span>newValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>触发事件的事件对象有几个属性： <strong>key</strong>：键值 <strong>oldValue</strong>：修改前的值 <strong>newValue</strong>：修改后的值 <strong>url</strong>：页面url <strong>storageArea</strong>：被修改的storage对象</p><h2 id="indexeddb" tabindex="-1"><a class="header-anchor" href="#indexeddb"><span>indexedDB</span></a></h2>',82)),o("blockquote",null,[o("p",null,[e[3]||(e[3]=s("这个我在这里就不码了，具体内容")),o("a",g,[e[2]||(e[2]=s("点击这里")),a(n)])])])])}const m=t(r,[["render",u],["__file","cache.html.vue"]]),b=JSON.parse('{"path":"/blogs/network-browser/cache.html","title":"缓存","lang":"zh-CN","frontmatter":{"title":"缓存","date":"2019-4-10","editLink":false,"tags":["网络与浏览器"],"categories":["前端"]},"headers":[{"level":2,"title":"缓存的分类？","slug":"缓存的分类","link":"#缓存的分类","children":[]},{"level":2,"title":"缓存的一些应用场景？","slug":"缓存的一些应用场景","link":"#缓存的一些应用场景","children":[]},{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"强缓存","slug":"强缓存","link":"#强缓存","children":[]},{"level":2,"title":"协商缓存","slug":"协商缓存","link":"#协商缓存","children":[]},{"level":2,"title":"几种状态码的区别","slug":"几种状态码的区别","link":"#几种状态码的区别","children":[]},{"level":2,"title":"简单对比","slug":"简单对比","link":"#简单对比","children":[]},{"level":2,"title":"cookie","slug":"cookie","link":"#cookie","children":[]},{"level":2,"title":"Storage：localStorage、sessionStorage","slug":"storage-localstorage、sessionstorage","link":"#storage-localstorage、sessionstorage","children":[]},{"level":2,"title":"indexedDB","slug":"indexeddb","link":"#indexeddb","children":[]}],"git":{"createdTime":1739535625000,"updatedTime":1739535625000,"contributors":[{"name":"sankigan","email":"sankigan@tencent.com","commits":1}]},"filePathRelative":"blogs/network-browser/cache.md"}');export{m as comp,b as data};
