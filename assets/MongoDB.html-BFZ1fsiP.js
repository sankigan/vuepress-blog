import{_ as s,c as a,e as p,o as e}from"./app-CRUSJUWc.js";const t={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="_1-安装-macos" tabindex="-1"><a class="header-anchor" href="#_1-安装-macos"><span>1. 安装（macOS）</span></a></h1><p>MongoDB 下载地址：https://www.mongodb.com/download-center#community</p><p>也可以使用 curl 命令来下载安装：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 进入 /usr/local</span></span>
<span class="line"><span class="token builtin class-name">cd</span> /usr/local</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 下载</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-O</span> https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-4.2.6.tgz</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 解压</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> mongodb-macos-x86_64-4.2.6.tgz</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 重命令为 mongodb 目录</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">mv</span> mongodb-macos-x86_64-4.2.6/ mongodb</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装完成后，可以把 MongoDB 的二进制命令文件目录添加到 PATH 路径中：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/mongodb/bin:<span class="token environment constant">$PATH</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>注意：如果使用了zsh，则需要将该配置添加到 <code>~/.zshrc</code> 文件中。</strong></p><p>最后，输入 <code>mongod --version</code> 测试是否安装成功。</p><h1 id="_2-启动和关闭数据库" tabindex="-1"><a class="header-anchor" href="#_2-启动和关闭数据库"><span>2. 启动和关闭数据库</span></a></h1><h2 id="启动" tabindex="-1"><a class="header-anchor" href="#启动"><span>启动</span></a></h2><p>MongoDB 默认使用 <code>/data/db</code> 作为数据存储目录，但如果 mac 已更新到 Catalina 系统，则根文件夹不再可写。第一种解决方案是先将安全模式关闭，再创建 <code>/data/db</code> 文件夹，最后再打开电脑的安全模式；鉴于第一种方案太麻烦，因此也可以在每次启动 MongoDB 数据库时都指定 MongoDB 数据库路径：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">sudo</span> mongod <span class="token parameter variable">--dbpath</span><span class="token operator">=</span>/Users/user/data/db</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="关闭" tabindex="-1"><a class="header-anchor" href="#关闭"><span>关闭</span></a></h2><p><code>Ctrl + c</code></p><h1 id="_3-连接和退出数据库" tabindex="-1"><a class="header-anchor" href="#_3-连接和退出数据库"><span>3. 连接和退出数据库</span></a></h1><h2 id="连接" tabindex="-1"><a class="header-anchor" href="#连接"><span>连接</span></a></h2><p>在启动 MongoDB 数据库时，再打开一个终端输入：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">mongo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="退出" tabindex="-1"><a class="header-anchor" href="#退出"><span>退出</span></a></h2><p><code>Ctrl + c</code></p><h1 id="_4-基本概念" tabindex="-1"><a class="header-anchor" href="#_4-基本概念"><span>4. 基本概念</span></a></h1><ul><li>可以有多个数据库</li><li>一个数据库中可以有多个集合（数据表）</li><li>一个集合中可以有多个文档（记录）</li><li>文档结构没有任何限制</li><li>不需要先创建数据库、表、设计表结构，当插入文档的时候，只需要指定往哪个数据库的哪个集合操作就可以了，一切都由 MongoDB 自动完成建库建表</li></ul><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">	<span class="token property">&quot;db&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token property">&quot;collection&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">			<span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Pony&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Sasha&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">]</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_5-基本命令" tabindex="-1"><a class="header-anchor" href="#_5-基本命令"><span>5. 基本命令</span></a></h1><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;"><code>show dbs</code></td><td style="text-align:center;">查看所有数据库</td></tr><tr><td style="text-align:center;"><code>db</code></td><td style="text-align:center;">查看当前操作数据库</td></tr><tr><td style="text-align:center;"><code>use DATABASE_NAME</code></td><td style="text-align:center;">切换到指定的数据库（如果没有会新建）</td></tr><tr><td style="text-align:center;"><code>show collections</code></td><td style="text-align:center;">查看已有集合</td></tr><tr><td style="text-align:center;"><code>db.users.insert({&quot;name&quot;: &quot;SANKI&quot;})</code></td><td style="text-align:center;">向集合中插入文档</td></tr><tr><td style="text-align:center;"><code>db.users.find()</code></td><td style="text-align:center;">查询集合中的文档</td></tr></tbody></table><p>MongoDB 中默认的数据库为 test，如果没有创建新的数据库，集合将存放在 test 数据库中。</p><p><strong>注意：在 MongoDB 中，集合只有在内容插入后才会创建！也就说，创建集合（数据表）后要再插入一个文档（记录），集合才会真正创建。</strong></p><h1 id="_6-在-node-中如何操作-mongodb-数据库" tabindex="-1"><a class="header-anchor" href="#_6-在-node-中如何操作-mongodb-数据库"><span>6. 在 Node 中如何操作 MongoDB 数据库</span></a></h1><h2 id="官方-mongodb-包" tabindex="-1"><a class="header-anchor" href="#官方-mongodb-包"><span>官方 MongoDB 包</span></a></h2><p>https://github.com/mongodb/node-mongodb-native</p><h2 id="第三方-mongoose-包" tabindex="-1"><a class="header-anchor" href="#第三方-mongoose-包"><span>第三方 mongoose 包</span></a></h2><p>https://mongoosejs.com/</p><h3 id="起步" tabindex="-1"><a class="header-anchor" href="#起步"><span>起步</span></a></h3><p>安装：<code>npm i mongoose</code></p><p>DEMO：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://127.0.0.1:27017/test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">useNewUrlParser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">useUnifiedTopology</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> Cat <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;Cat&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> String <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> kitty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Zildjian&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">kitty<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;meow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="官方指南" tabindex="-1"><a class="header-anchor" href="#官方指南"><span>官方指南</span></a></h3><p><strong>设计 Scheme 发布 Model</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 连接数据库</span></span>
<span class="line"><span class="token comment">// 指定连接的数据库不需要存在，当插入第一条数据之后就会自动被创建出来</span></span>
<span class="line">mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://127.0.0.1:27017/test&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 设计文档结构（表结构）</span></span>
<span class="line"><span class="token comment">// 字段名称就是表结构中的属性名称</span></span>
<span class="line"><span class="token comment">// 约束的目的是为了保证数据的完整性，不要有脏数据</span></span>
<span class="line"><span class="token keyword">const</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> String</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 将文档结构发布为模型</span></span>
<span class="line"><span class="token comment">// mongoose.model 方法用来将一个架构发布为 model</span></span>
<span class="line"><span class="token comment">// 第一个参数：传入一个答大写名词单数字符串用来表示数据库名称</span></span>
<span class="line"><span class="token comment">//           mongoose 会自动将大写名词的字符串生成小写复数的集合名称</span></span>
<span class="line"><span class="token comment">//           例如这里的 User 最终会变味 users 集合名称</span></span>
<span class="line"><span class="token comment">// 第二个参数：文档结构</span></span>
<span class="line"><span class="token comment">// 返回值：模型构造函数</span></span>
<span class="line"><span class="token keyword">const</span> User <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;User&#39;</span><span class="token punctuation">,</span> userSchema<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 当有了模型构造函数之后，就可以使用这个构造函数对 users 集合中的数据进行增删改查操作</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>增加数据</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;admin@admin.com&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">admin<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查询数据</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// ⭐️ 查询所有，返回数组</span></span>
<span class="line">User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ⭐️ 按条件查询所有，返回数组</span></span>
<span class="line">User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ⭐️ 按条件查询单个，返回一个对象</span></span>
<span class="line">User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除数据</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// ⭐️ 根据指定条件删除一个</span></span>
<span class="line">User<span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;sanki&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">Model<span class="token punctuation">.</span><span class="token function">findOneAndRemove</span><span class="token punctuation">(</span>conditions <span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ⭐️ 根据指定条件删除所有</span></span>
<span class="line">Model<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span>conditions <span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ⭐️ 根据id删除一个</span></span>
<span class="line">Model<span class="token punctuation">.</span><span class="token function">findByIdAndRemove</span><span class="token punctuation">(</span>id <span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>更新数据</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// ⭐️ 根据指定条件更新一个</span></span>
<span class="line">Model<span class="token punctuation">.</span><span class="token function">findOneAndUpdate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>conditions<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> update<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">Model<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span>conditions<span class="token punctuation">,</span> doc <span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ⭐️ 根据条件更新所有</span></span>
<span class="line">Model<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>conditions<span class="token punctuation">,</span> doc <span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">Model<span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span>conditions<span class="token punctuation">,</span> doc <span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ⭐️ 根据id更新一个</span></span>
<span class="line">Model<span class="token punctuation">.</span><span class="token function">findByIdAndUpdate</span><span class="token punctuation">(</span>id <span class="token punctuation">[</span><span class="token punctuation">,</span> update<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,47)]))}const i=s(t,[["render",o],["__file","MongoDB.html.vue"]]),u=JSON.parse('{"path":"/blogs/Nodejs/MongoDB.html","title":"MongoDB 入门","lang":"zh-CN","frontmatter":{"title":"MongoDB 入门","date":"2021-4-20","editLink":false,"tags":["MongoDB"],"categories":["后端"]},"headers":[{"level":2,"title":"启动","slug":"启动","link":"#启动","children":[]},{"level":2,"title":"关闭","slug":"关闭","link":"#关闭","children":[]},{"level":2,"title":"连接","slug":"连接","link":"#连接","children":[]},{"level":2,"title":"退出","slug":"退出","link":"#退出","children":[]},{"level":2,"title":"官方 MongoDB 包","slug":"官方-mongodb-包","link":"#官方-mongodb-包","children":[]},{"level":2,"title":"第三方 mongoose 包","slug":"第三方-mongoose-包","link":"#第三方-mongoose-包","children":[{"level":3,"title":"起步","slug":"起步","link":"#起步","children":[]},{"level":3,"title":"官方指南","slug":"官方指南","link":"#官方指南","children":[]}]}],"git":{"createdTime":1739535625000,"updatedTime":1739535625000,"contributors":[{"name":"sankigan","email":"sankigan@tencent.com","commits":1}]},"filePathRelative":"blogs/Nodejs/MongoDB.md"}');export{i as comp,u as data};
