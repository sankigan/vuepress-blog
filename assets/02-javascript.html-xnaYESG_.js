import{_ as c,c as i,a as s,e as p,d as a,b as t,w as u,r as l,o as r}from"./app-CRUSJUWc.js";const k={},d={href:"https://juejin.im/post/5b593e065188251aff2169f7",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.jianshu.com/p/eca50cc933b7",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.manster.me/?p=473",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.cnblogs.com/SanMaoSpace/archive/2013/06/15/3137180.html",target:"_blank",rel:"noopener noreferrer"};function g(h,n){const e=l("ExternalLinkIcon"),o=l("RouteLink");return r(),i("div",null,[n[9]||(n[9]=s("h1",{id:"javascript-第二章",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#javascript-第二章"},[s("span",null,"JavaScript 第二章")])],-1)),n[10]||(n[10]=s("h2",{id:"object-keys-的排序逻辑",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#object-keys-的排序逻辑"},[s("span",null,"Object.keys 的排序逻辑")])],-1)),s("p",null,[s("strong",null,[n[1]||(n[1]=a("具体")),s("a",d,[n[0]||(n[0]=a("猛戳这里")),t(e)])])]),n[11]||(n[11]=p('<p><code>Object.keys</code> 在内部会根据属性名 <code>key</code> 的类型进行不同的排序逻辑。分三种情况：</p><ol><li>如果属性名的类型是 <code>Number</code>，那么 <code>Object.keys</code> 返回值是按照 <code>key</code> 从小到大排序</li><li>如果属性名的类型是 <code>String</code>，那么 <code>Object.keys</code> 返回值是按照属性被创建的时间升序排序</li><li>如果属性名的类型是 <code>Symbol</code>，那么逻辑同 <code>String</code> 相同</li></ol><p><strong>该排序规则同样适用于：Object.values、Object.entries、for...in、Object.getOwnPropertyNames、Reflect.ownKeys</strong></p><h2 id="箭头函数和普通函数的区别" tabindex="-1"><a class="header-anchor" href="#箭头函数和普通函数的区别"><span>箭头函数和普通函数的区别</span></a></h2>',4)),s("p",null,[s("strong",null,[n[3]||(n[3]=a("具体")),s("a",v,[n[2]||(n[2]=a("猛戳这里")),t(e)])])]),n[12]||(n[12]=p(`<ol><li>不绑定this，箭头函数会捕获其所在上下文的this的值</li><li>使用 call 或 apply 对this没有影响</li><li>不绑定arguments，取而代之用rest参数 ... 解决</li><li>不能使用 new 操作符</li><li>没有原型属性</li><li>不能简单返回对象字面量 7. 箭头函数在参数和箭头之间不能换行</li></ol><h2 id="for-in-和-for-of-的区别" tabindex="-1"><a class="header-anchor" href="#for-in-和-for-of-的区别"><span>for...in 和 for...of 的区别</span></a></h2><ol><li>推荐在循环对象属性的时候使用 for...in，在遍历数组的时候使用 for...of</li><li>for...in 循环出的是 key，for...of 循环出的是 value</li><li>注意，for...of 是ES6新引入的特性。修复了ES5引入的 for...in 的不足</li><li>for...of 不能循环普通的对象，需要通过和 Object.keys() 搭配使用</li><li>for...in 不能遍历 Set 和 Map，而 for...of 可以</li></ol><p>之所以说 for...of 修复了 for...in 的不足是因为 for...in 除了遍历除了数组元素之外，还会遍历自定义属性</p><h2 id="set-和-weakset-的区别" tabindex="-1"><a class="header-anchor" href="#set-和-weakset-的区别"><span>Set 和 WeakSet 的区别</span></a></h2><ul><li><p>Set类似于数组，但是<strong>成员的值都是唯一的</strong>，没有重复。Set本身是一个构造函数，用来生成Set数据结构。</p></li><li><p>WeakSet的成员只能是对象，而不能是其他类型的值；</p></li><li><p>WeakSet中的对象都是<strong>弱引用</strong>，即垃圾回收机制不考虑WeakSet对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象是否还存在于WeakSet之中。</p></li><li><p>WeakSet的成员是不适合引用的，因为它会随时消失。另外，WeakSet内部有多少个成员取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此ES6规定<strong>WeakSet不可遍历</strong>。</p></li></ul><h2 id="map-和-weakmap-的区别" tabindex="-1"><a class="header-anchor" href="#map-和-weakmap-的区别"><span>Map 和 WeakMap 的区别</span></a></h2><ul><li><p>Map对象是一个简单的键/值映射。任何值都（包括对象和原始值）可以用作一个键或者一个值。</p></li><li><p>WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。</p></li><li><p>WeakMap的键名是对象的<strong>弱引用</strong>，键名所指向的对象不计入垃圾回收机制。典型的应用是，一个对应的DOM元素的WeakMap结构，当某个DOM元素被清除，其所对应的WeakMap记录就会自动被移除。基本上，WeakMap的专用场合就是，它的键所对应的对象，可能会在将来消失。<strong>WeakMap结构有助于防止内存泄漏</strong>。</p></li></ul><h2 id="map-和-object-的区别" tabindex="-1"><a class="header-anchor" href="#map-和-object-的区别"><span>Map 和 Object 的区别</span></a></h2><ul><li>一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。</li><li>Map 中的键值是有序的（FIFO原则），而添加到对象中的键则不是。</li><li>Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。</li><li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。</li></ul><h2 id="map-与-object-之间的相互转换" tabindex="-1"><a class="header-anchor" href="#map-与-object-之间的相互转换"><span>Map 与 Object 之间的相互转换</span></a></h2><h3 id="map-object" tabindex="-1"><a class="header-anchor" href="#map-object"><span>Map =&gt; Object</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-map" tabindex="-1"><a class="header-anchor" href="#object-map"><span>Object =&gt; Map</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">5</span><span class="token operator">:</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="map-的迭代" tabindex="-1"><a class="header-anchor" href="#map-的迭代"><span>Map 的迭代</span></a></h2><h3 id="for-of" tabindex="-1"><a class="header-anchor" href="#for-of"><span>for...of</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;zero&#39;</span><span class="token punctuation">)</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;one&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&#39; = &#39;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 这个 entries 方法返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的 [key, value] 数组</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&#39; = &#39;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 这个 keys 返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的键</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 这个 values 返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的值</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> value <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach"><span>forEach()</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;zero&#39;</span><span class="token punctuation">)</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;one&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&#39; = &#39;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="map-对象的操作" tabindex="-1"><a class="header-anchor" href="#map-对象的操作"><span>Map 对象的操作</span></a></h2><h3 id="map-与-array-的转换" tabindex="-1"><a class="header-anchor" href="#map-与-array-的转换"><span>Map 与 Array 的转换</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> kvArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;key2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;key3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Map 构造函数可以将一个二维键值对数组转换成一个 Map 对象</span></span>
<span class="line"><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>kvArray<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 Array.from 函数可以将一个 Map 对象转换成一个二维键值对数组</span></span>
<span class="line"><span class="token keyword">var</span> outArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="map-的克隆" tabindex="-1"><a class="header-anchor" href="#map-的克隆"><span>Map 的克隆</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> map1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;key2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map1 <span class="token operator">===</span> map2<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 打印 false。Map 对象构造函数生成实例，迭代出新的对象。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="map-的合并" tabindex="-1"><a class="header-anchor" href="#map-的合并"><span>Map 的合并</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;one&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;three&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> second <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;uno&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;dos&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> merged <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="undefined-与-null-的区别" tabindex="-1"><a class="header-anchor" href="#undefined-与-null-的区别"><span>undefined 与 null 的区别</span></a></h2><p><strong>undefined</strong>的语义是表示一个变量自然的、最原始的状态值，而非人为操作的结果。这种原始状态会在以下4中情景中出现：</p><ol><li>声明了一个变量，但没有赋值</li><li>访问对象上不存在的属性或方法</li><li>函数定义了形参，但没有传递实参</li><li>使用void对任何表达式求值</li></ol><p><strong>null</strong>表示一个变量被人为的设置为空对象，而不是原始状态。在内存里的表示就是，栈中的变量没有指向堆中的内存对象。</p><p>所以在实际使用过程中，为了保证变量所代表的的语义，不要对一个变量显式的赋值为undefined，当需要释放一个对象时，直接赋值为null即可。</p><h2 id="为什么typeof-null返回-object" tabindex="-1"><a class="header-anchor" href="#为什么typeof-null返回-object"><span>为什么typeof null返回&quot;object&quot;</span></a></h2><p>原理是不同的对象在底层都表示为二进制，在Javascript中<strong>二进制前三位都为0的话会被判断为Object类型</strong>，null的二进制表示全为0，自然前三位也是0，所以执行typeof时会返回&quot;object&quot;。</p><h2 id="前端路由实现原理" tabindex="-1"><a class="header-anchor" href="#前端路由实现原理"><span>前端路由实现原理</span></a></h2>`,35)),s("p",null,[t(o,{to:"/blogs/javascript/fe-router.html"},{default:u(()=>n[4]||(n[4]=[a("猛戳我")])),_:1})]),n[13]||(n[13]=p(`<h2 id="假值列表有哪些" tabindex="-1"><a class="header-anchor" href="#假值列表有哪些"><span>假值列表有哪些？</span></a></h2><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>NaN</code></li><li><code>0</code></li><li><code>false</code></li><li><code>&#39;&#39;</code></li></ul><h2 id="情景分析题-好比说你从后端拿到了一个对象-它的嵌套层级很深-可能要a-b-c-d-e-f-g-这样引用。但是传输过程中对象可能会损坏-可能a-b的属性c不见了-变成undefined了-。但如果还是像上面这样引用-就会变成向undefined请求属性-从而报错。" tabindex="-1"><a class="header-anchor" href="#情景分析题-好比说你从后端拿到了一个对象-它的嵌套层级很深-可能要a-b-c-d-e-f-g-这样引用。但是传输过程中对象可能会损坏-可能a-b的属性c不见了-变成undefined了-。但如果还是像上面这样引用-就会变成向undefined请求属性-从而报错。"><span>情景分析题：好比说你从后端拿到了一个对象，它的嵌套层级很深（可能要a.b.c.d.e.f.g）这样引用。但是传输过程中对象可能会损坏，可能a.b的属性c不见了（变成undefined了）。但如果还是像上面这样引用，就会变成向undefined请求属性，从而报错。</span></a></h2><blockquote><p>要求： 不能报错，但是需要知道引用链从哪里断开的（上例就是a.b.c） 如果引用链断开了，从而没有拿到真实的值，请给出一个默认值</p></blockquote><ul><li>方法一：利用try...catch的报错信息</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">getValueByPath</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;obj&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">return obj.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		error <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token operator">+</span> error<span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">let</span> idx1 <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">let</span> idx2 <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">,</span> idx1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">let</span> brokenString <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>idx1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> idx2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">let</span> brokenIdx <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>brokenString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">chain was broken at obj.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> brokenIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方法二</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">getValueByPath</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> names <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">var</span> o <span class="token operator">=</span> obj<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">var</span> tmpStr <span class="token operator">=</span> <span class="token string">&quot;obj&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		o <span class="token operator">=</span> o<span class="token punctuation">[</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">		tmpStr <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> o <span class="token operator">===</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">chain was broken at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tmpStr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span> o<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方法三</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">getValueByPath</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:^|\\.)(\\w+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		names<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">var</span> o <span class="token operator">=</span> obj<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">var</span> tmpStr <span class="token operator">=</span> <span class="token string">&quot;obj&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		o <span class="token operator">=</span> o<span class="token punctuation">[</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">		tmpStr <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> o <span class="token operator">===</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">chain was broken at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tmpStr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span> o<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取body里的标签个数" tabindex="-1"><a class="header-anchor" href="#获取body里的标签个数"><span>获取body里的标签个数</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="获得标签里的方法" tabindex="-1"><a class="header-anchor" href="#获得标签里的方法"><span>获得标签里的方法</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on\\w+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="前端渲染和后端渲染的区别" tabindex="-1"><a class="header-anchor" href="#前端渲染和后端渲染的区别"><span>前端渲染和后端渲染的区别</span></a></h2>`,15)),s("blockquote",null,[s("p",null,[n[6]||(n[6]=a("🔎")),s("a",m,[n[5]||(n[5]=a("点击这里")),t(e)])])]),n[14]||(n[14]=p('<p>前端渲染：后端的HTML页面作为静态文件存在，前端请求时后端不对该文件做任何内容上的修改，直接以资源的方式返回给前端，前端拿到页面后，根据写在HTML页面上的js代码，对该HTML内容进行修改。</p><p>后端渲染：后端的程序在把HTML吐给前端之前，先把HTML页面上的特定区域，特定符号，给用数据填充过，再扔给前端，这就是后端渲染。</p><p>前后端渲染本质是一样的，都是字符串的拼接，将数据渲染进一些固定格式的HTML代码中形成最终的HTML展示在用户页面上。</p><h2 id="xml和json的区别" tabindex="-1"><a class="header-anchor" href="#xml和json的区别"><span>XML和JSON的区别</span></a></h2><ul><li>解码难度：JSON的解码难度远小于XML</li><li>数据体积：JSON数据体积小，传递的速度比较快</li><li>数据交互：JSON与JavaScript交互更加方便，更容易解析处理</li><li>数据描述：XML对数据的描述性更好</li><li>传输速度：JSON速度远远快于XML</li></ul><h2 id="ajax的优缺点" tabindex="-1"><a class="header-anchor" href="#ajax的优缺点"><span>Ajax的优缺点</span></a></h2>',6)),s("blockquote",null,[s("p",null,[n[8]||(n[8]=a("🔎")),s("a",b,[n[7]||(n[7]=a("点击这里")),t(e)])])]),n[15]||(n[15]=p(`<p><strong>优点</strong></p><ol><li>无刷新更新数据</li><li>异步与服务器通信</li><li>前端和后端负载均衡</li><li>基于标准被广泛支持</li><li>界面与应用分离</li></ol><p><strong>缺点</strong></p><ol><li>Ajax干掉了Back和History功能，即对浏览器机制的破坏</li><li>Ajax的安全问题</li><li>对搜索引擎支持较弱</li><li>破坏程序的异常处理机制</li><li>违背URL和资源定位的初衷</li><li>Ajax不能很好支持移动设备</li><li>客户端过肥，太多客户端代码造成开发上的成本</li></ol><h2 id="ajax如何携带cookie" tabindex="-1"><a class="header-anchor" href="#ajax如何携带cookie"><span>Ajax如何携带cookie？</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://xxx.com/xxx&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 支持跨域发送cookies</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="proxy-比-object-defineproperty-好在哪儿" tabindex="-1"><a class="header-anchor" href="#proxy-比-object-defineproperty-好在哪儿"><span>Proxy 比 Object.defineProperty() 好在哪儿？</span></a></h2><p>Proxy可以监听对象身上发生了什么，并在这些事情发生后执行一些相应的操作。一下子让我们对一个对象有了很强的追踪能力，同时在数据绑定方面也很有用处。</p><ol><li>Proxy可以直接监听对象而非属性</li><li>Proxy可以直接监听数组的变化</li><li>Proxy有多达13种拦截方法，apply、ownKeys、deleteProperty、has等等是Object.defineProperty()不具备的</li><li>Proxy返回一个新对象，我们可以只操作新的对象达到目的，而Object.defineProperty()只能遍历对象属性直接修改</li><li>Proxy作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利</li><li>Proxy的缺点就是兼容性问题</li></ol>`,9))])}const y=c(k,[["render",g],["__file","02-javascript.html.vue"]]),j=JSON.parse('{"path":"/blogs/javascript/02-javascript.html","title":"JavaScript 第二章","lang":"zh-CN","frontmatter":{"title":"JavaScript 第二章","date":"2020-6-16","editLink":false,"tags":["JavaScript"],"categories":["前端"]},"headers":[{"level":2,"title":"Object.keys 的排序逻辑","slug":"object-keys-的排序逻辑","link":"#object-keys-的排序逻辑","children":[]},{"level":2,"title":"箭头函数和普通函数的区别","slug":"箭头函数和普通函数的区别","link":"#箭头函数和普通函数的区别","children":[]},{"level":2,"title":"for...in 和 for...of 的区别","slug":"for-in-和-for-of-的区别","link":"#for-in-和-for-of-的区别","children":[]},{"level":2,"title":"Set 和 WeakSet 的区别","slug":"set-和-weakset-的区别","link":"#set-和-weakset-的区别","children":[]},{"level":2,"title":"Map 和 WeakMap 的区别","slug":"map-和-weakmap-的区别","link":"#map-和-weakmap-的区别","children":[]},{"level":2,"title":"Map 和 Object 的区别","slug":"map-和-object-的区别","link":"#map-和-object-的区别","children":[]},{"level":2,"title":"Map 与 Object 之间的相互转换","slug":"map-与-object-之间的相互转换","link":"#map-与-object-之间的相互转换","children":[{"level":3,"title":"Map => Object","slug":"map-object","link":"#map-object","children":[]},{"level":3,"title":"Object => Map","slug":"object-map","link":"#object-map","children":[]}]},{"level":2,"title":"Map 的迭代","slug":"map-的迭代","link":"#map-的迭代","children":[{"level":3,"title":"for...of","slug":"for-of","link":"#for-of","children":[]},{"level":3,"title":"forEach()","slug":"foreach","link":"#foreach","children":[]}]},{"level":2,"title":"Map 对象的操作","slug":"map-对象的操作","link":"#map-对象的操作","children":[{"level":3,"title":"Map 与 Array 的转换","slug":"map-与-array-的转换","link":"#map-与-array-的转换","children":[]},{"level":3,"title":"Map 的克隆","slug":"map-的克隆","link":"#map-的克隆","children":[]},{"level":3,"title":"Map 的合并","slug":"map-的合并","link":"#map-的合并","children":[]}]},{"level":2,"title":"undefined 与 null 的区别","slug":"undefined-与-null-的区别","link":"#undefined-与-null-的区别","children":[]},{"level":2,"title":"为什么typeof null返回\\"object\\"","slug":"为什么typeof-null返回-object","link":"#为什么typeof-null返回-object","children":[]},{"level":2,"title":"前端路由实现原理","slug":"前端路由实现原理","link":"#前端路由实现原理","children":[]},{"level":2,"title":"假值列表有哪些？","slug":"假值列表有哪些","link":"#假值列表有哪些","children":[]},{"level":2,"title":"情景分析题：好比说你从后端拿到了一个对象，它的嵌套层级很深（可能要a.b.c.d.e.f.g）这样引用。但是传输过程中对象可能会损坏，可能a.b的属性c不见了（变成undefined了）。但如果还是像上面这样引用，就会变成向undefined请求属性，从而报错。","slug":"情景分析题-好比说你从后端拿到了一个对象-它的嵌套层级很深-可能要a-b-c-d-e-f-g-这样引用。但是传输过程中对象可能会损坏-可能a-b的属性c不见了-变成undefined了-。但如果还是像上面这样引用-就会变成向undefined请求属性-从而报错。","link":"#情景分析题-好比说你从后端拿到了一个对象-它的嵌套层级很深-可能要a-b-c-d-e-f-g-这样引用。但是传输过程中对象可能会损坏-可能a-b的属性c不见了-变成undefined了-。但如果还是像上面这样引用-就会变成向undefined请求属性-从而报错。","children":[]},{"level":2,"title":"获取body里的标签个数","slug":"获取body里的标签个数","link":"#获取body里的标签个数","children":[]},{"level":2,"title":"获得标签里的方法","slug":"获得标签里的方法","link":"#获得标签里的方法","children":[]},{"level":2,"title":"前端渲染和后端渲染的区别","slug":"前端渲染和后端渲染的区别","link":"#前端渲染和后端渲染的区别","children":[]},{"level":2,"title":"XML和JSON的区别","slug":"xml和json的区别","link":"#xml和json的区别","children":[]},{"level":2,"title":"Ajax的优缺点","slug":"ajax的优缺点","link":"#ajax的优缺点","children":[]},{"level":2,"title":"Ajax如何携带cookie？","slug":"ajax如何携带cookie","link":"#ajax如何携带cookie","children":[]},{"level":2,"title":"Proxy 比 Object.defineProperty() 好在哪儿？","slug":"proxy-比-object-defineproperty-好在哪儿","link":"#proxy-比-object-defineproperty-好在哪儿","children":[]}],"git":{"createdTime":1739535625000,"updatedTime":1739535625000,"contributors":[{"name":"sankigan","email":"sankigan@tencent.com","commits":1}]},"filePathRelative":"blogs/javascript/02-javascript.md"}');export{y as comp,j as data};
