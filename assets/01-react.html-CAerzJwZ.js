import{_ as c,c as i,a as e,e as p,b as s,w as t,r,o,d as l}from"./app-CRUSJUWc.js";const d={},u={id:"vdom",tabindex:"-1"},h={class:"header-anchor",href:"#vdom"},m={id:"redux",tabindex:"-1"},v={class:"header-anchor",href:"#redux"};function g(k,n){const a=r("RouteLink");return o(),i("div",null,[e("h2",u,[e("a",h,[e("span",null,[s(a,{to:"/blogs/react/v-dom.html"},{default:t(()=>n[0]||(n[0]=[l("VDOM")])),_:1})])])]),e("h2",m,[e("a",v,[e("span",null,[s(a,{to:"/blogs/react/redux.html"},{default:t(()=>n[1]||(n[1]=[l("Redux")])),_:1})])])]),n[2]||(n[2]=p(`<h2 id="vue-和-react-的区别" tabindex="-1"><a class="header-anchor" href="#vue-和-react-的区别"><span>Vue 和 React 的区别</span></a></h2><p>改变数据方式不同，Vue修改状态相比来说要简单的多，React需要使用setState来改变状态，并且使用这个API也有一些坑点。Vue的底层使用了依赖追踪，页面更新渲染已经是最优的了，但是React还是需要用户手动去优化这方面的问题。</p><p>React需要使用JSX，Vue使用了模板语法。</p><h2 id="react-优点是什么" tabindex="-1"><a class="header-anchor" href="#react-优点是什么"><span>React 优点是什么？</span></a></h2><ul><li>JSX的引入，使得组件的代码更加可读，也更容易看懂组件的布局，或者组件之间是如何互相引用的</li><li>支持服务器端渲染，可改进SEO和性能</li><li>易于测试</li><li>React只关注View层，所以可以和其他任何框架（Backbone.js，Angular.js）一起使用</li></ul><h2 id="react-生命周期函数" tabindex="-1"><a class="header-anchor" href="#react-生命周期函数"><span>React 生命周期函数</span></a></h2><p>React生命周期主要包括三个主要场景：</p><ul><li><p>装载（Mounting）：组件被插入 DOM 中</p></li><li><p>更新（Updating）：组件重新渲染以更新 DOM</p></li><li><p>卸载（Unmounting）：组件从 DOM 中移除</p></li></ul><p>不同的场景会调用不同的生命周期方法，包含<code>will</code>的方法在某个时间节点<strong>之前</strong>执行，包含<code>did</code>方法在某个时间节点<strong>之后</strong>执行。</p><h3 id="初始渲染-装载" tabindex="-1"><a class="header-anchor" href="#初始渲染-装载"><span>初始渲染（装载）</span></a></h3><table><thead><tr><th>生命周期函数</th><th>作用</th></tr></thead><tbody><tr><td><strong>getDefaultProps</strong></td><td>获取实例的默认属性</td></tr><tr><td><strong>getInitialState</strong></td><td>获取每个实例的初始化状态</td></tr><tr><td><strong>componentWillMount</strong></td><td>组件即将被装载、渲染到页面上</td></tr><tr><td><strong>render</strong></td><td>组件在这里生成虚拟的DOM节点</td></tr><tr><td><strong>componentDidMount</strong></td><td>组件真正在被装载之后</td></tr></tbody></table><h3 id="更新" tabindex="-1"><a class="header-anchor" href="#更新"><span>更新</span></a></h3><table><thead><tr><th>生命周期函数</th><th>作用</th></tr></thead><tbody><tr><td><strong>componentWillReceiveProps</strong></td><td>组件将要接受到属性的时候调用</td></tr><tr><td><strong>shouldComponentUpdate</strong></td><td>组件接受到新属性或者新状态的时候（可以返回false，接收数据后不更新，阻止render调用，后面的函数不会被继续执行了）</td></tr><tr><td><strong>componentWillUpdate</strong></td><td>组件即将更新不能修改属性和状态</td></tr><tr><td><strong>render</strong></td><td>组件重新描绘</td></tr><tr><td><strong>componentDidUpdate</strong></td><td>组件已经更新</td></tr></tbody></table><h3 id="卸载" tabindex="-1"><a class="header-anchor" href="#卸载"><span>卸载</span></a></h3><table><thead><tr><th>生命周期函数</th><th>作用</th></tr></thead><tbody><tr><td><strong>componentWillUnmount</strong></td><td>组件即将卸载</td></tr></tbody></table><h2 id="shouldcomponentupdate-nextprops-nextstate-是做什么的-react-性能优化是哪个周期函数" tabindex="-1"><a class="header-anchor" href="#shouldcomponentupdate-nextprops-nextstate-是做什么的-react-性能优化是哪个周期函数"><span>shouldComponentUpdate(nextProps, nextState) 是做什么的（React 性能优化是哪个周期函数）？</span></a></h2><p>当父组件被重新渲染时即render函数执行时，子组件就会默认被重新渲染，但很多时候是不需要重新渲染每一个子组件的。这时就可以使用<code>shouldComponentUpdate</code>来判断是否真的需要重新渲染子组件。仅仅一个判断，就可以节约很多的消耗。所以<strong>对于父组件发生变化而子组件不变的情况，使用<code>shouldComponentUpdate</code>会提升性能</strong>。</p><div class="language-react line-numbers-mode" data-highlighter="prismjs" data-ext="react" data-title="react"><pre class="language-react"><code><span class="line">shouldComponentUpdate(nextProps, nextState) {</span>
<span class="line">    if (nextProps.content === this.props.content) {</span>
<span class="line">        return fasle;</span>
<span class="line">    } else {</span>
<span class="line">        return true;</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="react-生命周期中-最适合与服务器端进行数据交互的是哪个函数" tabindex="-1"><a class="header-anchor" href="#react-生命周期中-最适合与服务器端进行数据交互的是哪个函数"><span>React 生命周期中，最适合与服务器端进行数据交互的是哪个函数？</span></a></h2><p><code>componentDidMount</code>：在这个阶段，<strong>实例和DOM已经挂载完成，可以进行相关的DOM操作</strong>。</p><h2 id="调用-setstate-之后发生了什么" tabindex="-1"><a class="header-anchor" href="#调用-setstate-之后发生了什么"><span>调用 setState 之后发生了什么？</span></a></h2><ul><li>将传递给setState的对象合并到组件的当前状态，触发所谓的调和（Reconciliation）过程。</li><li>然后生成新的元素树和旧的元素树使用Diff算法对比。</li><li>根据对比差异对界面进行<strong>最小化重渲染</strong>。</li></ul><p>（在差异计算算法中，React能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了<strong>按需更新</strong>，而不是全部重新渲染。）</p><h2 id="setstate-第二个参数的作用" tabindex="-1"><a class="header-anchor" href="#setstate-第二个参数的作用"><span>setState 第二个参数的作用</span></a></h2><p><strong>我们可以用该函数来监听渲染是否完成</strong>。因为setState是一个异步的过程，所以说执行完setState之后不能立刻更改state里面的值。如果需要对state数据更改监听，setState提供第二个参数，就是用来监听state里面数据的更改，当数据更改完成，调用回调函数。</p><h2 id="为什么建议传递给-setstate-的参数是一个-callback-而不是一个对象" tabindex="-1"><a class="header-anchor" href="#为什么建议传递给-setstate-的参数是一个-callback-而不是一个对象"><span>为什么建议传递给 setState 的参数是一个 callback 而不是一个对象</span></a></h2><p>setState它是一个异步函数，他会合并多次修改，降低Diff算法的比对频率。这样也会提升性能。</p><p>React内部会把JavaScript事件循环中的消息队列的同一个消息中的setState都进行合并以后再重新渲染组件。</p><p>因为this.props和this.state的<strong>更新是异步的，不能依赖它们的值去计算下一个state</strong>。</p><h2 id="react-中-key-的作用" tabindex="-1"><a class="header-anchor" href="#react-中-key-的作用"><span>React 中 key 的作用</span></a></h2><p>key是React用于追踪那些列表中元素被修改、被添加或者被移除的辅助标识。Diff算法中React会借助元素的key值来判断该元素时新近创建的还是被移动而来的元素，从而减少不必要的元素重新渲染。此外，React还需要借助key值来判断元素与本地状态的关联关系。</p><h2 id="react-中组件传值" tabindex="-1"><a class="header-anchor" href="#react-中组件传值"><span>React 中组件传值</span></a></h2><p>父传子：父组件定义一个属性，子组件通过this.props接收</p><p>子传父：父组件定义一个属性，并将一个回调函数赋值给定义的属性，然后子组件进行调用传过来的函数，并将参数传进去，在父组件的回调函数中即可获得子组件传过来的值。</p><h2 id="为什么要在-constructor-中绑定事件函数的this指向" tabindex="-1"><a class="header-anchor" href="#为什么要在-constructor-中绑定事件函数的this指向"><span>为什么要在 constructor 中绑定事件函数的this指向</span></a></h2><p>把一个对象的方法赋值给一个变量会造成this的丢失，所以需要绑定this，把绑定放在构造函数中可以保证只绑定一次函数，如果放在render函数中绑定this的话每次渲染都会去绑定一次this，那样是很耗费性能的。</p><h2 id="无状态组件" tabindex="-1"><a class="header-anchor" href="#无状态组件"><span>无状态组件</span></a></h2><p>无状态组件就是使用定义函数的方式来定义组件，这种组件相比于使用类的方式来定义的组件（有状态组件），少了很多初始化过程，更加精简，所以要是可以使用无状态组件应当尽可能的使用无状态组件，会大幅提升效率。</p><h2 id="react-中-refs-的作用是什么" tabindex="-1"><a class="header-anchor" href="#react-中-refs-的作用是什么"><span>React 中 refs 的作用是什么？</span></a></h2><p>refs是React提供给我们的安全访问DOM元素或者某个组件实例的API。</p><div class="language-react line-numbers-mode" data-highlighter="prismjs" data-ext="react" data-title="react"><pre class="language-react"><code><span class="line">class CustomForm extends Component {</span>
<span class="line">    handleSubmit = () =&gt; {</span>
<span class="line">        console.log(&quot;Input Value: &quot;, this.input.value);</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    render() {</span>
<span class="line">    	return (</span>
<span class="line">        	&lt;form onSubmit={this.handleSubmit}&gt;</span>
<span class="line">                &lt;input</span>
<span class="line">                    type = &quot;text&quot;</span>
<span class="line">                    ref = {(input) =&gt; this.input = input} /&gt;</span>
<span class="line">                &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span>
<span class="line">            &lt;/form&gt;</span>
<span class="line">        )</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在构造函数中调用-super-props-的目的是什么" tabindex="-1"><a class="header-anchor" href="#在构造函数中调用-super-props-的目的是什么"><span>在构造函数中调用 super(props) 的目的是什么？</span></a></h2><p><strong>在super()被调用之前，子类是不能使用this的，在ES6中，子类必须在constructor中调用super()</strong>。传递props给super()的原因则是便于（在子类中）能在constructor访问this.props。</p><h2 id="展示组件-presentational-component-和容器组件-container-component-之间有何不同" tabindex="-1"><a class="header-anchor" href="#展示组件-presentational-component-和容器组件-container-component-之间有何不同"><span>展示组件（Presentational component）和容器组件（Container component）之间有何不同</span></a></h2><ul><li><p><strong>展示组件关心组件看起来是什么</strong>。</p><p>展示专门通过props接收数据和回调，并且几乎不会有自身的状态，但当展示组件拥有自身的状态时，通常也只关心UI状态而不是数据的状态。</p></li><li><p><strong>容器组件则更关心组件是如何运作的</strong>。</p><p>容器组件会为展示组件或者其他容器组件提供数据和行为，它们会调用Flux actions，并将其作为回调提供给展示组件。容器组件经常是有状态的，因为它们是（其它组件的）数据源。</p></li></ul><h2 id="类组件-class-component-和函数式组件-functional-component-之间有何不同" tabindex="-1"><a class="header-anchor" href="#类组件-class-component-和函数式组件-functional-component-之间有何不同"><span>类组件（Class component）和函数式组件（Functional component）之间有何不同</span></a></h2><ul><li>类组件不仅允许你使用更多额外的功能，如组件自身的状态和生命周期钩子，也能使组件直接访问store并维持状态。</li><li>当组件仅是接收props，并将组件自身渲染到页面时，该组件就是一个<code>无状态组件</code>，可以使用一个纯函数来创建这样的组件。</li></ul><h2 id="组件的-状态-state-和属性-props-之间有何不同" tabindex="-1"><a class="header-anchor" href="#组件的-状态-state-和属性-props-之间有何不同"><span>（组件的）状态（state）和属性（props）之间有何不同</span></a></h2><ul><li>state是一种数据结构，用于组件挂载时所需数据的默认值。state可能会随着时间的推移而发生突变，但多数时候是作为用户事件行为的结果。</li><li>props则是组件的配置。props由父组件传递给子组件，并且就子组件而言，props是不可变的（immutable）。组件不能改变自身的props，但是可以把其子组件的props放在一起（统一管理）。props也不仅仅是数据，回调函数也可以通过props传递。</li></ul><h2 id="react-同构-ssr-时页面加载流程" tabindex="-1"><a class="header-anchor" href="#react-同构-ssr-时页面加载流程"><span>React 同构（SSR）时页面加载流程</span></a></h2><ol><li>服务器运行React代码渲染出HTML</li><li>浏览器加载这个无交互的HTML代码</li><li>浏览器接收到内容展示</li><li>浏览器加载JS文件</li><li>JS中React代码在浏览器中重新执行</li></ol><h2 id="应该在react组件的何处发起ajax请求" tabindex="-1"><a class="header-anchor" href="#应该在react组件的何处发起ajax请求"><span>应该在React组件的何处发起Ajax请求？</span></a></h2><p>在React组件中，应该在componentDidMount中发起网络请求。这个方法会在组件第一次“挂载”（被添加到DOM）时执行，在组件的生命周期中仅会执行一次。更重要的是，你不能保证在组件挂载之前Ajax请求已经完成，如果是这样，也就意味着你将尝试在一个未挂载的组件上调用setState，这将不起作用。</p><h2 id="何为受控组件" tabindex="-1"><a class="header-anchor" href="#何为受控组件"><span>何为受控组件</span></a></h2><p>一个输入表单元素，它的值通过React的这种方式来控制，这样的元素就被称为受控元素。</p><p>在HTML中，类似<code>&lt;input&gt;</code>，<code>&lt;textarea&gt;</code>和<code>&lt;select&gt;</code>这样的表单元素会维护自身的状态，并基于用户的输入来更新。但在React中会有些不同，包含表单元素的组件将会在state中追踪输入的值，并且每次调用回调函数时，如onChange会更新state，重新渲染组件。</p><h2 id="何为高阶组件-hoc" tabindex="-1"><a class="header-anchor" href="#何为高阶组件-hoc"><span>何为高阶组件（HOC）</span></a></h2><p>高阶组件是一个以组件为参数并返回一个新组件的函数。</p><p>高阶组件运行你重用代码、逻辑和引导抽象。最常见的可能是Redux的connect函数。除了简单分享工具库和简单的组合，高阶组件最好的方式是共享React组件之间的行为。如果你发现你在不同的地方写了大量代码来做同一件事，就应该考虑将代码重构为可重用的高阶组件。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在如果我想给这个add函数添加一个输出结果的功能，那么你可能会考虑我直接用<code>console.log</code>不就实现了么。说的没错，但是如果我们想做的更加优雅并且容易复用和扩展，我们可以这样去做：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">withLog</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> wrapper<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> withLogAdd <span class="token operator">=</span> <span class="token function">withLog</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">withLogAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个做法在函数式编程里称之为高阶函数，大家都知道React的思想中是存在函数式编程的，高阶组件和高阶函数就是同一个东西。我们实现一个函数，传入一个组件，然后在函数内部再实现一个函数去扩展传入的组件，最后返回一个新的组件，这就是高阶组件的概念，作用就是为了更好的复用代码。</p><h2 id="除了在构造函数中绑定-this-还有其它方式吗" tabindex="-1"><a class="header-anchor" href="#除了在构造函数中绑定-this-还有其它方式吗"><span>除了在构造函数中绑定 this ，还有其它方式吗？</span></a></h2><p>你可以使用属性初始值设定项来正确绑定回调，create-react-app也是默认支持的。在回调中你可以使用箭头函数，但问题是每次组件渲染时都会创建一个新的回调。</p><h2 id="怎么阻止组件的渲染" tabindex="-1"><a class="header-anchor" href="#怎么阻止组件的渲染"><span>怎么阻止组件的渲染</span></a></h2><p>在组件的render方法中返回null并不会影响触发组件的生命周期方法。</p><h2 id="react-事件机制" tabindex="-1"><a class="header-anchor" href="#react-事件机制"><span>React 事件机制</span></a></h2><p>React其实自己实现了一套事件机制，首先我们考虑一下以下代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>list<span class="token punctuation">,</span> handleClick<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">    	<span class="token operator">&lt;</span>span onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">	<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事实当然不是，JSX上写的事件并没有绑定在对应的真实DOM上，而是通过事件代理的方式，<strong>将所有的事件统一绑定在了document上</strong>。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。</p><p>另外冒泡到document上的事件也不是原生浏览器事件，而是<strong>React自己实现的合成事件（SyntheticEvent）</strong>。因此我们如果不想要事件冒泡的话，调用<code>event.stopPropagation</code>是无效的，而应该调用<code>event.preventDefault</code>。</p><p>那么实现合成事件的好处有两点，分别是：</p><ol><li>合成事件首先抹平了浏览器之间的兼容问题，另外这是一个跨浏览器原生事件包装器，赋予了跨浏览器开发的能力</li><li>对于原生浏览器事件来说，浏览器会给监听器创建一个事件对象。如果你有很多的事件监听，那么就需要分配很多的事件对象，造成高额的内存分配问题。但是对于合成事件来说，有一个<em>事件池</em>专门来管理它们的创建和销毁，当事件需要被使用时，就会从池子中复用对象，事件回调结束后，就会销毁事件对象上的属性，从而便于下次复用事件对象。</li></ol><h2 id="createelement和cloneelement有什么区别" tabindex="-1"><a class="header-anchor" href="#createelement和cloneelement有什么区别"><span>createElement和cloneElement有什么区别？</span></a></h2><p>JSX语法就是用<code>React.createElement()</code>来构建React元素的。它接收三个参数，第一个参数可以是一个标签名。如div、span，或者React组件。第二个参数为传入的属性。第三个及以后的参数，皆作为组件的子组件。</p><div class="language-react line-numbers-mode" data-highlighter="prismjs" data-ext="react" data-title="react"><pre class="language-react"><code><span class="line">React.createElement(</span>
<span class="line">	type,</span>
<span class="line">    [props],</span>
<span class="line">    [...children]</span>
<span class="line">)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>React.cloneElement()</code>与<code>React.createElement()</code>相似，不同的是它传入的第一个参数是一个React元素，而不是标签名或组件。新添加的属性会并入原有的属性，传入到返回的新元素中，而旧的子元素将被替换。</p><div class="language-react line-numbers-mode" data-highlighter="prismjs" data-ext="react" data-title="react"><pre class="language-react"><code><span class="line">React.cloneElement(</span>
<span class="line">	element,</span>
<span class="line">    [props],</span>
<span class="line">    [...children]</span>
<span class="line">)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="react中有三种构建组件的方式" tabindex="-1"><a class="header-anchor" href="#react中有三种构建组件的方式"><span>React中有三种构建组件的方式</span></a></h2><p><code>React.createClass()</code>、ES6 class和无状态函数。</p><h2 id="react组件的划分业务组件和技术组件" tabindex="-1"><a class="header-anchor" href="#react组件的划分业务组件和技术组件"><span>React组件的划分业务组件和技术组件？</span></a></h2><ul><li>根据组件的职责通常把组件分为UI组件和容器组件</li><li>UI组件负责UI的呈现，容器组件负责管理数据和逻辑</li><li>两者通过React-Redux提供connect方法联系起来</li></ul><h2 id="简述flux思想" tabindex="-1"><a class="header-anchor" href="#简述flux思想"><span>简述Flux思想</span></a></h2><p>Flux的最大特点，就是数据的<strong>单向流动</strong>。</p><ol><li><p>用户访问View</p></li><li><p>View发出用户的action</p></li><li><p>Dispatcher收到Action，要求store进行相应的更新</p></li><li><p>Store更新后，发出一个“change”事件</p></li><li><p>View收到“change”事件后，更新页面</p></li></ol>`,86))])}const x=c(d,[["render",g],["__file","01-react.html.vue"]]),f=JSON.parse('{"path":"/blogs/react/01-react.html","title":"React 入门","lang":"zh-CN","frontmatter":{"title":"React 入门","date":"2021-4-20","editLink":false,"tags":["React"],"categories":["前端"]},"headers":[{"level":2,"title":"VDOM","slug":"vdom","link":"#vdom","children":[]},{"level":2,"title":"Redux","slug":"redux","link":"#redux","children":[]},{"level":2,"title":"Vue 和 React 的区别","slug":"vue-和-react-的区别","link":"#vue-和-react-的区别","children":[]},{"level":2,"title":"React 优点是什么？","slug":"react-优点是什么","link":"#react-优点是什么","children":[]},{"level":2,"title":"React 生命周期函数","slug":"react-生命周期函数","link":"#react-生命周期函数","children":[{"level":3,"title":"初始渲染（装载）","slug":"初始渲染-装载","link":"#初始渲染-装载","children":[]},{"level":3,"title":"更新","slug":"更新","link":"#更新","children":[]},{"level":3,"title":"卸载","slug":"卸载","link":"#卸载","children":[]}]},{"level":2,"title":"shouldComponentUpdate(nextProps, nextState) 是做什么的（React 性能优化是哪个周期函数）？","slug":"shouldcomponentupdate-nextprops-nextstate-是做什么的-react-性能优化是哪个周期函数","link":"#shouldcomponentupdate-nextprops-nextstate-是做什么的-react-性能优化是哪个周期函数","children":[]},{"level":2,"title":"React 生命周期中，最适合与服务器端进行数据交互的是哪个函数？","slug":"react-生命周期中-最适合与服务器端进行数据交互的是哪个函数","link":"#react-生命周期中-最适合与服务器端进行数据交互的是哪个函数","children":[]},{"level":2,"title":"调用 setState 之后发生了什么？","slug":"调用-setstate-之后发生了什么","link":"#调用-setstate-之后发生了什么","children":[]},{"level":2,"title":"setState 第二个参数的作用","slug":"setstate-第二个参数的作用","link":"#setstate-第二个参数的作用","children":[]},{"level":2,"title":"为什么建议传递给 setState 的参数是一个 callback 而不是一个对象","slug":"为什么建议传递给-setstate-的参数是一个-callback-而不是一个对象","link":"#为什么建议传递给-setstate-的参数是一个-callback-而不是一个对象","children":[]},{"level":2,"title":"React 中 key 的作用","slug":"react-中-key-的作用","link":"#react-中-key-的作用","children":[]},{"level":2,"title":"React 中组件传值","slug":"react-中组件传值","link":"#react-中组件传值","children":[]},{"level":2,"title":"为什么要在 constructor 中绑定事件函数的this指向","slug":"为什么要在-constructor-中绑定事件函数的this指向","link":"#为什么要在-constructor-中绑定事件函数的this指向","children":[]},{"level":2,"title":"无状态组件","slug":"无状态组件","link":"#无状态组件","children":[]},{"level":2,"title":"React 中 refs 的作用是什么？","slug":"react-中-refs-的作用是什么","link":"#react-中-refs-的作用是什么","children":[]},{"level":2,"title":"在构造函数中调用 super(props) 的目的是什么？","slug":"在构造函数中调用-super-props-的目的是什么","link":"#在构造函数中调用-super-props-的目的是什么","children":[]},{"level":2,"title":"展示组件（Presentational component）和容器组件（Container component）之间有何不同","slug":"展示组件-presentational-component-和容器组件-container-component-之间有何不同","link":"#展示组件-presentational-component-和容器组件-container-component-之间有何不同","children":[]},{"level":2,"title":"类组件（Class component）和函数式组件（Functional component）之间有何不同","slug":"类组件-class-component-和函数式组件-functional-component-之间有何不同","link":"#类组件-class-component-和函数式组件-functional-component-之间有何不同","children":[]},{"level":2,"title":"（组件的）状态（state）和属性（props）之间有何不同","slug":"组件的-状态-state-和属性-props-之间有何不同","link":"#组件的-状态-state-和属性-props-之间有何不同","children":[]},{"level":2,"title":"React 同构（SSR）时页面加载流程","slug":"react-同构-ssr-时页面加载流程","link":"#react-同构-ssr-时页面加载流程","children":[]},{"level":2,"title":"应该在React组件的何处发起Ajax请求？","slug":"应该在react组件的何处发起ajax请求","link":"#应该在react组件的何处发起ajax请求","children":[]},{"level":2,"title":"何为受控组件","slug":"何为受控组件","link":"#何为受控组件","children":[]},{"level":2,"title":"何为高阶组件（HOC）","slug":"何为高阶组件-hoc","link":"#何为高阶组件-hoc","children":[]},{"level":2,"title":"除了在构造函数中绑定 this ，还有其它方式吗？","slug":"除了在构造函数中绑定-this-还有其它方式吗","link":"#除了在构造函数中绑定-this-还有其它方式吗","children":[]},{"level":2,"title":"怎么阻止组件的渲染","slug":"怎么阻止组件的渲染","link":"#怎么阻止组件的渲染","children":[]},{"level":2,"title":"React 事件机制","slug":"react-事件机制","link":"#react-事件机制","children":[]},{"level":2,"title":"createElement和cloneElement有什么区别？","slug":"createelement和cloneelement有什么区别","link":"#createelement和cloneelement有什么区别","children":[]},{"level":2,"title":"React中有三种构建组件的方式","slug":"react中有三种构建组件的方式","link":"#react中有三种构建组件的方式","children":[]},{"level":2,"title":"React组件的划分业务组件和技术组件？","slug":"react组件的划分业务组件和技术组件","link":"#react组件的划分业务组件和技术组件","children":[]},{"level":2,"title":"简述Flux思想","slug":"简述flux思想","link":"#简述flux思想","children":[]}],"git":{"createdTime":1739535625000,"updatedTime":1739535625000,"contributors":[{"name":"sankigan","email":"sankigan@tencent.com","commits":1}]},"filePathRelative":"blogs/react/01-react.md"}');export{x as comp,f as data};
