import{_ as t,c as s,e as r,o}from"./app-CRUSJUWc.js";const l={};function n(i,e){return o(),s("div",null,e[0]||(e[0]=[r('<h3 id="xss" tabindex="-1"><a class="header-anchor" href="#xss"><span>XSS</span></a></h3><p>XSS，即<code>Cross Site Script</code>，中译是跨站脚本攻击，其原本缩写是CSS，但是为了和层叠样式表有所区分，因而在安全领域叫做XSS。</p><p>XSS攻击是指攻击者在网站上注入恶意的客户端代码，通过恶意脚本对客户端网页进行篡改，从而在用户浏览网页时，对用户浏览器进行控制或者获取用户隐私数据的一种攻击方式。<strong>这类攻击通常包含了HTML以及用户端脚本语言</strong>。</p><p><strong>XSS攻击的防范</strong></p><ul><li><p><strong>HttpOnly防止窃取Cookie</strong></p><p>浏览器将禁止页面的JavaScript访问带有HttpOnly属性的Cookie，严格来说，HttpOnly 并非阻止 XSS 攻击，而是能阻止 XSS 攻击后的 Cookie 劫持攻击。</p></li><li><p><strong>输入检查</strong></p><p><strong>不要相信用户的任何输入</strong>。对于用户的任何输入要进行检查、过滤和转义。建立可信任的字符和HTML标签白名单，对于不在白名单之列的字符或者标签进行过滤或编码。</p></li><li><p><strong>输出检查</strong></p><p>用户的输入会出现问题，服务端的输出也会存在问题。一般来说，除富文本的输出外，在变量输出到HTML页面时，可以使用编码或转义的方式来防御XSS攻击。</p></li></ul><h3 id="csrf" tabindex="-1"><a class="header-anchor" href="#csrf"><span>CSRF</span></a></h3><p>CSRF，即<code>Cross Site Request Forgery</code>，中译是跨站请求伪造，是一种劫持受信任用户向服务器发送非预期请求的攻击方式。</p><p>通常情况下，CSRF攻击是攻击者借助受害者的Cookie骗取服务器的信任，可以在受害者毫不知情的情况下以受害者名义伪造请求发送给服务器，从而在并未授权的情况下执行在权限保护之下的操作。</p><p><strong>CSRF攻击的防范</strong></p><ul><li><p><strong>验证码</strong></p><p>验证码被认为是对抗CSRF攻击最简洁而有效的防御方法。CSRF往往是在用户不知情的情况下构造了网络请求。而验证码会强制用户必须与应用进行交互，才能完成最终请求。但是验证码不是万能的，因为出于用户考虑，不能给网站上所有的操作都加上验证码。因此，验证码只能作为防御CSRF的一种辅助手段。</p></li><li><p><strong>Referer Check</strong></p><p>根据HTTP协议，在HTTP头部中有一个字段叫做<code>Referer</code>，它记录了该HTTP请求的来源地址。通过Referer Check，可以检查请求是否来自合法的“源”。</p><blockquote><p>Referer Check不仅能防范CSRF攻击，另一个应用场景是“防止图片盗链”。</p></blockquote></li><li><p><strong>添加token验证</strong></p><p>要防御CSRF，关键在于在请求中放入攻击者所不能伪造的信息，并在服务器建立一个拦截器来验证这个token，如果请求中没有token或者token内容不正确，则认为可能是CSRF攻击而拒绝该请求。</p></li></ul><h3 id="sql-注入" tabindex="-1"><a class="header-anchor" href="#sql-注入"><span>SQL 注入</span></a></h3><p>所谓SQL注入，就是通过把 SQL 命令插入到 Web 表单提交或输入域名或页面请求的查询字符串，后台执行 SQL 语句时直接把前端传入的字段拿来做 SQL 查询。</p><p><strong>防御</strong></p><ul><li>永远不要信任用户的输入</li><li>永远不要使用动态拼接 SQL</li><li>不要把机密信息直接存放</li></ul>',14)]))}const a=t(l,[["render",n],["__file","security.html.vue"]]),c=JSON.parse('{"path":"/blogs/network-browser/security.html","title":"网络安全","lang":"zh-CN","frontmatter":{"title":"网络安全","date":"2019-3-21","editLink":false,"tags":["网络与浏览器"],"categories":["前端"]},"headers":[{"level":3,"title":"XSS","slug":"xss","link":"#xss","children":[]},{"level":3,"title":"CSRF","slug":"csrf","link":"#csrf","children":[]},{"level":3,"title":"SQL 注入","slug":"sql-注入","link":"#sql-注入","children":[]}],"git":{"createdTime":1739535625000,"updatedTime":1739535625000,"contributors":[{"name":"sankigan","email":"sankigan@tencent.com","commits":1}]},"filePathRelative":"blogs/network-browser/security.md"}');export{a as comp,c as data};
