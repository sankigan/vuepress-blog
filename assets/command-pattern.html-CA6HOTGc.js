import{_ as s,c as a,e as t,o as p}from"./app-CRUSJUWc.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="命令模式" tabindex="-1"><a class="header-anchor" href="#命令模式"><span>命令模式</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>命令模式的定义是：用于将一个请求封装成一个对象，从而使你可以用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及执行可撤销的操作。也就是说该模式旨在将函数的调用、请求和操作封装成一个单一的对象，然后对这个对象进行一系列的处理。此外，可以通过调用实现具体函数的对象来解耦命令对象与接收对象。</p><h2 id="正文" tabindex="-1"><a class="header-anchor" href="#正文"><span>正文</span></a></h2><p>我们来通过车辆购买程序来展示这个模式，首先定义车辆购买的具体操作类：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> CarManager <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 请求信息</span></span>
<span class="line">        <span class="token function-variable function">requestInfo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">model<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The information for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>model<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> with ID </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is foobar</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 购买汽车</span></span>
<span class="line">        <span class="token function-variable function">buyVehicle</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">model<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You have successfully purchased Item </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>model<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 组织view</span></span>
<span class="line">        <span class="token function-variable function">arrangeViewing</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">model<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You have successfully booked a viewing of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>model<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看一下上述代码，通过调用函数来简单执行manager的命令，然而在一些情况下，我们并不想直接调用对象内部的方法。这样会增加对象与对象间的依赖。现在我们来扩展一下这个CarManager使其能够接受任何来自包括model和carID的CarManager对象的处理请求。根据命令模式的定义，我们希望实现如下这种功能的调用：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">CarManager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">commandType</span><span class="token operator">:</span> <span class="token string">&quot;buyVehicle&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">operand1</span><span class="token operator">:</span> <span class="token string">&quot;Ford Escort&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">operand2</span><span class="token operator">:</span> <span class="token string">&quot;454543&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据这样的需求，我们可以这样来实现CarManager.execute方法：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">CarManager<span class="token punctuation">.</span><span class="token function-variable function">execute</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">command</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> CarManager<span class="token punctuation">[</span>command<span class="token punctuation">.</span>request<span class="token punctuation">]</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>model<span class="token punctuation">,</span> command<span class="token punctuation">.</span>carID<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改造以后，调用就简单多了，如下调用都可以实现（当然有些异常细节还是需要再完善一下的）：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">Carmanager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token string">&quot;arrangeViewing&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token string">&quot;Ferrari&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">carID</span><span class="token operator">:</span> <span class="token string">&quot;145523&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Carmanager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token string">&quot;requestInfo&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token string">&quot;Ford Mondeo&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">carID</span><span class="token operator">:</span> <span class="token string">&quot;543434&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Carmanager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token string">&quot;requestInfo&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token string">&quot;Ford Escort&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">carID</span><span class="token operator">:</span> <span class="token string">&quot;543434&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Carmanager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token string">&quot;buyVehicle&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token string">&quot;Ford Escort&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">carID</span><span class="token operator">:</span> <span class="token string">&quot;543434&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>命令模式比较容易设计一个命令队列，在需求的情况下比较容易将命令计入日志，并且允许接收请求的一方决定是否需要调用，而且可以实现对请求的撤销和重设，而且由于新增的具体类不影响其他的类，所以很容易实现。</p><p>但敏捷开发原则告诉我们，不要为代码添加基于猜测的、实际不需要的功能，如果不清楚一个系统是否需要命令模式，一般就不要着急去实现它，事实上，在需求的时候通过重构实现这个模式并不困难，只有在真正需求如撤销、恢复操作等功能时，把原来的代码重构为命令模式才有意义。</p>`,15)]))}const i=s(e,[["render",o],["__file","command-pattern.html.vue"]]),r=JSON.parse('{"path":"/blogs/design-patterns/command-pattern.html","title":"命令模式","lang":"zh-CN","frontmatter":{"title":"命令模式","date":"2019-4-17","editLink":false,"tags":["设计模式基础"],"categories":["设计模式"]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"正文","slug":"正文","link":"#正文","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1739535625000,"updatedTime":1739535625000,"contributors":[{"name":"sankigan","email":"sankigan@tencent.com","commits":1}]},"filePathRelative":"blogs/design-patterns/command-pattern.md"}');export{i as comp,r as data};
